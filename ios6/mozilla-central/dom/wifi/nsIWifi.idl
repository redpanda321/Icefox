/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"
#include "nsIDOMDOMRequest.idl"
#include "nsIDOMEvent.idl"

interface nsIVariant;

[scriptable, uuid(cf1ac02b-1f39-446e-815b-651ac78d2233)]
interface nsIWifiScanResult : nsISupports {
    readonly attribute DOMString ssid;
    readonly attribute DOMString bssid;

    const int32_t WPA_PSK = 0x01;
    const int32_t WPA_EAP = 0x02;
    const int32_t WEP = 0x04;
    readonly attribute uint32_t capabilities;

    /**
     * Strength of the signal to network.
     */
    readonly attribute uint32_t signalStrength;

    readonly attribute uint32_t relSignalStrength;
    readonly attribute boolean connected;
};

[scriptable, uuid(a6931ebf-8493-4014-90e2-99f406999982)]
interface nsIWifiScanResultsReady : nsISupports {

    /**
     * Callback with list of networks.
     */
    void onready(in uint32_t count, [array, size_is(count)] in nsIWifiScanResult results);

    /**
     * Callback if scanning for networks failed after 3 retry attempts.
     */
    void onfailure();
};

[scriptable, uuid(08dfefed-5c5d-4468-8c5d-2c65c24692d9)]
interface nsIWifi : nsISupports
{
    /**
     * Shutdown the wifi system.
     */
    void shutdown();

    /**
     * Returns the list of currently available networks as well as the list of
     * currently configured networks.
     *
     * On success a callback is notified with the list of networks.
     * On failure after 3 scan retry attempts a callback is notified of failure.
     */
    void getWifiScanResults(in nsIWifiScanResultsReady callback);
};

[scriptable, uuid(caa76ee3-8ffe-4ea5-bc59-3b53a9df0d07)]
interface nsIDOMWifiManager : nsISupports
{
    /**
     * Returns the list of currently available networks.
     * onsuccess: We have obtained the current list of networks. request.value
     *            is an object whose property names are SSIDs and values are
     *            network objects.
     * onerror: We were unable to obtain a list of property names.
     */
    nsIDOMDOMRequest getNetworks();

    /**
     * Returns the list of networks known to the system that will be
     * automatically connected to if they're in range.
     * onsuccess: request.value is an object whose property names are
     *            SSIDs and values are network objects.
     * onerror: We were unable to obtain a list of known networks.
     */
    nsIDOMDOMRequest getKnownNetworks();

    /**
     * Takes one of the networks returned from getNetworks and tries to
     * connect to it.
     * @param network A network object with information about the network,
     *                such as the SSID, key management desired, etc.
     * onsuccess: We have started attempting to associate with the network.
     *            request.value is true.
     * onerror: We were unable to select the network. This most likely means a
     *          configuration error.
     */
    nsIDOMDOMRequest associate(in jsval network);

    /**
     * Given a network, removes it from the list of networks that we'll
     * automatically connect to. In order to re-connect to the network, it is
     * necessary to call associate on it.
     * @param network A network object with the SSID of the network to remove.
     * onsuccess: We have removed this network. If we were previously
     *            connected to it, we have started reconnecting to the next
     *            network in the list.
     * onerror: We were unable to remove the network.
     */
    nsIDOMDOMRequest forget(in jsval network);

    /**
     * Wi-Fi Protected Setup functionality.
     * @param detail WPS detail which has 'method' and 'pin' field.
     *               The possible method field values are:
     *                 - pbc: The Push Button Configuration.
     *                 - pin: The PIN configuration.
     *                 - cancel: Request to cancel WPS in progress.
     *               If method field is 'pin', 'pin' field can exist and has
     *               a PIN number.
     * onsuccess: We have successfully started/canceled wps.
     * onerror: We have failed to start/cancel wps.
     */
    nsIDOMDOMRequest wps(in jsval detail);

    /**
     * Turn on/off wifi power saving mode.
     * @param enabled true or false.
     * onsuccess: We have successfully turn on/off wifi power saving mode.
     * onerror: We have failed to turn on/off wifi power saving mode.
     */
    nsIDOMDOMRequest setPowerSavingMode(in boolean enabled);

    /**
     * Returns whether or not wifi is currently enabled.
     */
    readonly attribute boolean enabled;

    /**
     * Returns the MAC address of the wifi adapter.
     */
    readonly attribute DOMString macAddress;

    /**
     * An non-null object containing the following information:
     *  - status ("disconnected", "connecting", "associated", "connected")
     *  - network
     *
     *  Note that the object returned is read only. Any changes required must
     *  be done by calling other APIs.
     */
    readonly attribute jsval connection;

    /**
     * A connectionInformation object with the same information found in an
     * nsIDOMMozWifiConnectionInfoEvent (but without the network).
     * If we are not currently connected to a network, this will be null.
     */
    readonly attribute jsval connectionInformation;

    /**
     * State notification listeners. These all take an
     * nsIDOMMozWifiStatusChangeEvent with the new status and a network (which
     * may be null).
     *
     * The possible statuses are:
     *   - connecting: Fires when we start the process of connecting to a
     *                 network.
     *   - associated: Fires when we have connected to an access point but do
     *                 not yet have an IP address.
     *   - connected: Fires once we are fully connected to an access point and
     *                can access the internet.
     *   - disconnected: Fires when we either fail to connect to an access
     *                   point (transition: associated -> disconnected) or
     *                   when we were connected to a network but have
     *                   disconnected for any reason (transition: connected ->
     *                   disconnected).
     */
    attribute nsIDOMEventListener onstatuschange;

    /**
     * An event listener that is called with information about the signal
     * strength and link speed every 5 seconds.
     */
    attribute nsIDOMEventListener connectionInfoUpdate;

    /**
     * These two events fire when the wifi system is brought online or taken
     * offline.
     */
    attribute nsIDOMEventListener onenabled;
    attribute nsIDOMEventListener ondisabled;
};
