#!/usr/bin/perl
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

use strict;
use warnings;

use Archive::Zip(':ERROR_CODES');

my ($BUILDCONFIG);

sub fixBuildconfig($$$);

$BUILDCONFIG = 'content/global/buildconfig.html';

if (scalar(@ARGV) != 3) {
  print STDERR ("usage: fix-buildconfig <jar|file> <file1> <file2>\n");
  exit(1);
}

if (!fixBuildconfig($ARGV[0], $ARGV[1], $ARGV[2])) {
  exit(1);
}

exit(0);

sub fixBuildconfig($$$) {
  my ($mode, $path1, $path2);
  ($mode, $path1, $path2) = @_;

  if ($mode ne 'jar' && $mode ne 'file') {
    print STDERR ($0.': must specify jar or file\n');
    return 0;
  }

  my ($contents1, $contents2);
  my ($ze, $zip1, $zip2);

  if ($mode eq 'jar') {
    $zip1 = Archive::Zip->new();
    if (($ze = $zip1->read($path1)) != AZ_OK) {
      print STDERR ($0.': could not read "'.$path1.'": error '.$ze."\n");
      return 0;
    }
    $zip2 = Archive::Zip->new();
    if (($ze = $zip2->read($path2)) != AZ_OK) {
      print STDERR ($0.': could not read "'.$path2.'": error '.$ze."\n");
      return 0;
    }

    $contents1 = $zip1->contents($BUILDCONFIG);
    $contents2 = $zip2->contents($BUILDCONFIG);
  } elsif ($mode eq 'file') {
    local($/);
    my ($file1, $file2);

    open($file1, '<'.$path1.$BUILDCONFIG) or return 0;
    open($file2, '<'.$path2.$BUILDCONFIG) or return 0;

    $contents1 = <$file1>;
    $contents2 = <$file2>;

    close($file1);
    close($file2);
  }

  if (!defined($contents1)) {
    print STDERR ($0.': could not get "'.$BUILDCONFIG.'" from "'.$path1.'"'.
                  "\n");
    return 0;
  }
  if (!defined($contents2)) {
    print STDERR ($0.': could not get "'.$BUILDCONFIG.'" from "'.$path2.'"'.
                  "\n");
    return 0;
  }

  my (@lines1, @lines2);
  @lines1 = split(/\n/, $contents1);
  @lines2 = split(/\n/, $contents2);

  my ($line, @linesNew);
  @linesNew = ();

  # Copy everything from the first file up to the end of its <body>.
  while ($line = shift(@lines1)) {
    if ($line eq '</body>') {
      last;
    }
    push(@linesNew, $line);
  }

  # Insert a <hr> between the two files.
  push (@linesNew, '<hr> </hr>');

  # Copy the second file's content beginning after its leading <h1>.
  while ($line = shift(@lines2)) {
    if ($line eq '<h1>about:buildconfig</h1>') {
      last;
    }
  }
  while ($line = shift(@lines2)) {
    push(@linesNew, $line);
  }

  my ($contentsNew);
  $contentsNew = join("\n", @linesNew);

  if ($mode eq 'jar') {
    if (!defined($zip1->contents($BUILDCONFIG, $contentsNew))) {
      print STDERR ($0.': could not set "'.$BUILDCONFIG.'" to "'.$path1.'"'.
                    "\n");
      return 0;
    }
    if (!defined($zip2->contents($BUILDCONFIG, $contentsNew))) {
      print STDERR ($0.': could not set "'.$BUILDCONFIG.'" to "'.$path2.'"'.
                    "\n");
      return 0;
    }

    if (($ze = $zip1->overwrite()) != AZ_OK) {
      print STDERR ($0.': could not write "'.$path1.'": error '.$ze."\n");
      return 0;
    }
    if (($ze = $zip2->overwrite()) != AZ_OK) {
      print STDERR ($0.': could not write "'.$path2.'": error '.$ze."\n");
      return 0;
    }
  } elsif ($mode eq 'file') {
    my ($file1, $file2);

    open($file1, '>'.$path1.$BUILDCONFIG) or return 0;
    open($file2, '>'.$path2.$BUILDCONFIG) or return 0;

    print $file1 ($contentsNew);
    print $file2 ($contentsNew);

    close($file1);
    close($file2);
  }

  return 1;
}
