/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set sw=2 ts=8 et tw=80 ft=cpp : */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

include protocol PNecko;
include InputStreamParams;
include URIParams;

include protocol PBlob; //FIXME: bug #792908

include "mozilla/net/PHttpChannelParams.h";
include "mozilla/net/NeckoMessageUtils.h";
include "prio.h";

using RequestHeaderTuples;
using nsHttpHeaderArray;
using nsHttpResponseHead;
using nsHttpAtom;
using PRNetAddr;

namespace mozilla {
namespace net {

//-------------------------------------------------------------------
protocol PHttpChannel
{
  manager PNecko;

parent:
  AsyncOpen(URIParams           uri,
            // - TODO: bug 571161: unclear if any HTTP channel clients ever
            // set originalURI != uri (about:credits?); also not clear if
            // chrome channel would ever need to know.  Get rid of next arg?
            OptionalURIParams   original,
            OptionalURIParams   doc,
            OptionalURIParams   referrer,
            uint32_t            loadFlags,
            RequestHeaderTuples requestHeaders,
            nsHttpAtom          requestMethod,
            OptionalInputStreamParams uploadStream,
            bool                uploadStreamHasHeaders,
            uint16_t            priority,
            uint8_t             redirectionLimit,
            bool                allowPipelining,
            bool                forceAllowThirdPartyCookie,
            bool                resumeAt,
            uint64_t            startPos,
            nsCString           entityID,
            bool                chooseApplicationCache,
            nsCString           appCacheClientID,
            bool                allowSpdy);

  // Used to connect redirected-to channel on the parent with redirected-to
  // channel on the child.
  ConnectChannel(uint32_t channelId);

  SetPriority(uint16_t priority);

  SetCacheTokenCachedCharset(nsCString charset);

  UpdateAssociatedContentSecurity(int32_t broken,
                                  int32_t no);
  Suspend();
  Resume();

  Cancel(nsresult status);

  // Reports approval/veto of redirect by child process redirect observers
  Redirect2Verify(nsresult result, RequestHeaderTuples changedHeaders);

  // For document loads we keep this protocol open after child's
  // OnStopRequest, and send this msg (instead of __delete__) to allow
  // partial cleanup on parent. 
  DocumentChannelCleanup();

  // This might have to be sync. If this fails we must fail the document load
  // to avoid endless loop.
  //
  // Explanation: the document loaded was loaded from the offline cache. But
  // the cache group id (the manifest URL) of the cache group it was loaded 
  // from is different then the manifest the document refers to in the html 
  // tag. If we detect this during the cache selection algorithm, we must not 
  // load this document from the offline cache group it was just loaded from.
  // Marking the cache entry as foreign in its cache group will prevent
  // the document to load from the bad offline cache group. After it is marked,
  // we reload the document to take the effect. If we fail to mark the entry 
  // as foreign, we will end up in the same situation and reload again and
  // again, indefinitely.
  MarkOfflineCacheEntryAsForeign();

  __delete__();

child:
  OnStartRequest(nsHttpResponseHead  responseHead,
                 bool                useResponseHead,
                 nsHttpHeaderArray   requestHeaders,
                 bool                isFromCache,
                 bool                cacheEntryAvailable,
                 uint32_t            cacheExpirationTime,
                 nsCString           cachedCharset,
                 nsCString           securityInfoSerialization,
                 PRNetAddr           selfAddr,
                 PRNetAddr           peerAddr);

  // Combines a single OnDataAvailable and its associated OnProgress &
  // OnStatus calls into one IPDL message
  OnTransportAndData(nsresult  status,
                     uint64_t  progress,
                     uint64_t  progressMax,
                     nsCString data,
                     uint64_t  offset,
                     uint32_t  count);

  OnStopRequest(nsresult statusCode);

  OnProgress(uint64_t progress, uint64_t progressMax);

  OnStatus(nsresult status);

  // Used to cancel child channel if we hit errors during creating and
  // AsyncOpen of nsHttpChannel on the parent.
  FailedAsyncOpen(nsresult status);

  // Called to initiate content channel redirect, starts talking to sinks
  // on the content process and reports result via Redirect2Verify above
  Redirect1Begin(uint32_t           newChannelId,
                 URIParams          newUri,
                 uint32_t           redirectFlags,
                 nsHttpResponseHead responseHead);

  // Called if redirect successful so that child can complete setup.
  Redirect3Complete();

  // Associte the child with an application ids
  AssociateApplicationCache(nsCString groupID,
                            nsCString clientID);

  // Tell child to delete channel (all IPDL deletes must be done from child to
  // avoid races: see bug 591708).
  DeleteSelf();
};


} // namespace net
} // namespace mozilla

