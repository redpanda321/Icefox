/* -*- Mode: IDL; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"
#include "nsIAtom.idl"

%{ C++
#include "nsIUnicodeDecoder.h"
#include "nsIUnicodeEncoder.h"
#include "nsStringGlue.h"


// XXX change to NS_CHARSETCONVERTERMANAGER_CID
#define NS_ICHARSETCONVERTERMANAGER_CID \
  {0x3c1c0163, 0x9bd0, 0x11d3, { 0x9d, 0x9, 0x0, 0x50, 0x4, 0x0, 0x7, 0xb2}}

// XXX change to NS_CHARSETCONVERTERMANAGER_PID
#define NS_CHARSETCONVERTERMANAGER_CONTRACTID "@mozilla.org/charset-converter-manager;1"
%}

interface nsIUnicodeDecoder;
interface nsIUnicodeEncoder;
interface nsIUTF8StringEnumerator;

/**
 *
 * Here Charsets are identified by ASCII strings. Charset alias
 * resolution is provided by default in most methods. "Raw"
 * versions that do not need this resolution are also provided.
 *
 * @created         21/Feb/2000
 * @author  Catalin Rotaru [CATA]
 */
[scriptable, uuid(a0550d46-8d9c-47dd-acc7-c083620dff12)]
interface nsICharsetConverterManager : nsISupports
{
    /**
     * Get the Unicode decoder for the given charset.
     * The "Raw" version skips charset alias resolution
     */
    [noscript] nsIUnicodeDecoder getUnicodeDecoder(in string charset);
    [noscript] nsIUnicodeDecoder getUnicodeDecoderRaw(in string charset);
    [noscript] nsIUnicodeDecoder getUnicodeDecoderInternal(in string charset);

    /**
     * Get the Unicode encoder for the given charset.
     * The "Raw" version skips charset alias resolution
     */
    [noscript] nsIUnicodeEncoder getUnicodeEncoder(in string charset);
    [noscript] nsIUnicodeEncoder getUnicodeEncoderRaw(in string charset);

    /**
     * A shortcut to calling nsICharsetAlias to do alias resolution
     * @throws if aCharset is an unknown charset.
     */
    ACString getCharsetAlias(in string aCharset);
    
    /**
     * Get the complete list of available decoders.
     */
    nsIUTF8StringEnumerator getDecoderList();

    /**
     * Get the complete list of available encoders.
     */
    nsIUTF8StringEnumerator getEncoderList();

    /**
     * Get the complete list of available charset detectors.
     */
    nsIUTF8StringEnumerator GetCharsetDetectorList();

    /**
     * Get the human-readable name for the given charset.
     * @throws if aCharset is an unknown charset.
     */
    AString getCharsetTitle(in string aCharset);

    /**
     * Get some data about the given charset. This includes whether the 
     * character encoding may be used for certain purposes, if it is 
     * multi-byte, and the language code for it. See charsetData.properties
     * for the source of this data. Some known property names:
     *    notForBrowser  - not to be used in the browser.
     *    notForOutgoing - not to be used for exporting files.
     *    LangGroup      - language code for charset, e.g. 'he' and 'zh-CN'.
     *    isMultibyte    - is this a multi-byte charset?
     *    isInternal     - not to be used in untrusted web content.
     * 
     * @param aCharset name of the character encoding, e.g. 'iso-8859-15'.
     * @param aProp property desired for the character encoding.
     * @throws if aCharset is an unknown charset.
     * @return the value of the property, for the character encoding.
     */
    AString getCharsetData(in string aCharset, 
                           in wstring aProp);

    /**
     * Get the language group for the given charset. This is similar to 
     * calling <tt>getCharsetData</tt> with the <tt>prop</tt> "LangGroup".
     * 
     * @param aCharset name of the character encoding, e.g. 'iso-8859-15'.
     * @throws if aCharset is an unknown charset.
     * @return the language code for the character encoding.
     */
    nsIAtom getCharsetLangGroup(in string aCharset);
    nsIAtom getCharsetLangGroupRaw(in string aCharset);
};
