/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"

interface nsIFrame;
interface nsIObjectFrame;
interface nsIPluginTag;
interface nsIDOMElement;
interface nsIDOMClientRect;
interface nsIURI;

%{C++
#include "nsNPAPIPluginInstance.h"
%}
[ptr] native nsNPAPIPluginInstancePtr(nsNPAPIPluginInstance);

/**
 * This interface represents a content node that loads objects.
 */

[scriptable, uuid(e3e284a3-b4a8-49ef-af6b-c8c4a158db86)]
interface nsIObjectLoadingContent : nsISupports
{
  const unsigned long TYPE_LOADING  = 0;
  const unsigned long TYPE_IMAGE    = 1;
  const unsigned long TYPE_PLUGIN   = 2;
  const unsigned long TYPE_DOCUMENT = 3;
  const unsigned long TYPE_NULL     = 4;

  /**
   * The actual mime type (the one we got back from the network
   * request) for the element.
   */
  readonly attribute ACString actualType;

  /**
   * Gets the type of the content that's currently loaded. See
   * the constants above for the list of possible values.
   */
  readonly attribute unsigned long displayedType;

  /**
   * Gets the content type that corresponds to the give MIME type.  See the
   * constants above for the list of possible values.  If nothing else fits,
   * TYPE_NULL will be returned.
   */
  unsigned long getContentTypeForMIMEType(in AUTF8String aMimeType);

  /**
   * Returns the plugin instance if it has already been instantiated. This
   * will never instantiate the plugin and so is safe to call even when
   * content script must not execute.
   */
  [noscript] readonly attribute nsNPAPIPluginInstancePtr pluginInstance;

  /**
   * Tells the content about an associated object frame.
   * This can be called multiple times for different frames.
   *
   * This is noscript because this is an internal method that will go away, and
   * because nsIObjectFrame is unscriptable.
   */
  [noscript] void hasNewFrame(in nsIObjectFrame aFrame);

  [noscript] void disconnectFrame();

  /**
   * If this object is in going to be printed, this method
   * returns the nsIObjectFrame object which should be used when
   * printing the plugin. The returned nsIFrame is in the original document,
   * not in the static clone.
   */
  [noscript] nsIFrame getPrintFrame();

  [noscript] void pluginCrashed(in nsIPluginTag pluginTag,
                                in AString pluginDumpID,
                                in AString browserDumpID,
                                in boolean submittedCrashReport);

  /**
   * This method will play a plugin that has been stopped by the
   * click-to-play plugins feature.
   */
  void playPlugin();

  /**
   * This attribute will return true if the plugin has been activated
   * and false if the plugin is still in the click-to-play state.
   */
  readonly attribute boolean activated;

  [noscript] void stopPluginInstance();

  [noscript] void syncStartPluginInstance();
  [noscript] void asyncStartPluginInstance();

  /**
   * The URL of the data/src loaded in the object. This may be null (i.e.
   * an <embed> with no src).
   */
  readonly attribute nsIURI srcURI;
};
