/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"
#include "nsISelectionListener.idl"
#include "nsIEnumerator.idl"
#include "nsISelection.idl"

interface nsRange;
interface nsIDOMNode;
interface nsISelectionListener;
interface nsIContent;
interface nsINode;

%{C++
class nsFrameSelection;
class nsIFrame;
class nsIPresShell;
struct nsTextRangeStyle;
struct nsPoint;
struct ScrollAxis;
#include "nsIFrame.h"
#include "nsTArray.h"
%}

[ptr] native nsFrameSelection(nsFrameSelection);
[ptr] native nsIFrame(nsIFrame);
[ptr] native nsIPresShell(nsIPresShell);
[ptr] native RangeArray(nsTArray<nsRange*>);
[ref] native constTextRangeStyleRef(const nsTextRangeStyle);
[ref] native nsPointRef(nsPoint);
native nsDirection(nsDirection);
native ScrollAxis(nsIPresShell::ScrollAxis);

[scriptable, uuid(3a1a6d3b-3698-4561-ba00-ba648cb2b0d4)]
interface nsISelectionPrivate : nsISelection
 {
    const short ENDOFPRECEDINGLINE=0;
    const short STARTOFNEXTLINE=1;
    
    attribute boolean interlinePosition;

    /* startBatchChanges
       match this up with endbatchChanges. will stop ui updates while multiple selection methods are called
    */
    void  startBatchChanges();
    
    /* endBatchChanges
       match this up with startBatchChanges
    */
    void  endBatchChanges();
		
    nsIEnumerator  getEnumerator();
    DOMString  toStringWithFormat(in string formatType, in unsigned long flags, in PRInt32 wrapColumn);
    void  addSelectionListener(in nsISelectionListener newListener);
    void  removeSelectionListener(in nsISelectionListener listenerToRemove);

    /* Table selection stuff
       We should probably move this and table-related 
       items in nsFrameSelection  to a
       new nsITableSelection interface
    */
    const long TABLESELECTION_NONE     = 0; 
    const long TABLESELECTION_CELL     = 1; 
    const long TABLESELECTION_ROW      = 2; 
    const long TABLESELECTION_COLUMN   = 3; 
    const long TABLESELECTION_TABLE    = 4; 
    const long TABLESELECTION_ALLCELLS = 5;

    /** Test if supplied range points to a single table element:
      *    Result is one of above constants. "None" means
      *    a table element isn't selected.
      */
    long getTableSelectionType(in nsIDOMRange range);
    
    /* Internal utility method to set the pres shell on a newly created selection */
    [noscript] void setPresShell(in nsIPresShell aPresShell);

    /* canCacheFrameOffset
     * Frame Offset cache can be used just during calling nsEditor::EndPlaceHolderTransaction.
     * EndPlaceHolderTransaction will give rise to reflow/refreshing view/scroll, and call times
     * of nsTextFrame::GetPointFromOffset whose return value is to be cached.
     * see bugs 35296 and 199412
     */
    [noscript] attribute boolean canCacheFrameOffset;

    /* GetCachedOffsetForFrame
     * Returns cached value for nsTextFrame::GetPointFromOffset.
     */
    [noscript] void getCachedFrameOffset(in nsIFrame aFrame, in PRInt32 inOffset, in nsPointRef aPoint);

    /* getFrameSelection
     * Returnes a reference to the frame selection associated with this selection 
     */
    [noscript] nsFrameSelection getFrameSelection();

    [noscript] void setAncestorLimiter(in nsIContent aContent);

    /**
     * Set the painting style for the range. The range must be a range in
     * the selection. The textRangeStyle will be used by text frame
     * when it is painting the selection.
     */
    [noscript] void setTextRangeStyle(in nsIDOMRange range,
                      in constTextRangeStyleRef textRangeStyle);

    /**
     * Get the direction of the selection.
     */
    [noscript, notxpcom] nsDirection getSelectionDirection();
    [noscript, notxpcom] void setSelectionDirection(in nsDirection aDirection);
    
    /**
     * Returns the type of the selection (see nsISelectionController for
     * available constants).
     */
    readonly attribute short type;

    /**
     * Return array of ranges intersecting with the given DOM interval.
     */
    void GetRangesForInterval(
        in nsIDOMNode beginNode, in PRInt32 beginOffset,
        in nsIDOMNode endNode, in PRInt32 endOffset,
        in boolean allowAdjacent,
        out PRUint32 resultCount,
        [retval, array, size_is(resultCount)] out nsIDOMRange results);

    [noscript] void GetRangesForIntervalArray(
        in nsINode beginNode, in PRInt32 beginOffset,
        in nsINode endNode, in PRInt32 endOffset,
        in boolean allowAdjacent,
        in RangeArray results);

    /**
     * Scrolls a region of the selection, so that it is visible in
     * the scrolled view.
     *
     * @param aRegion - the region inside the selection to scroll into view
     *                  (see selection region constants defined in
     *                   nsISelectionController).
     * @param aIsSynchronous - when true, scrolls the selection into view
     *                         before returning. If false, posts a request which
     *                         is processed at some point after the method returns.
     * @param aVPercent - how to align the frame vertically.
     * @param aHPercent - how to align the frame horizontally.
     */
    void scrollIntoView(in short aRegion, in boolean aIsSynchronous,
                        in PRInt16 aVPercent,
                        in PRInt16 aHPercent);

    /**
     * Scrolls a region of the selection, so that it is visible in
     * the scrolled view.
     *
     * @param aRegion - the region inside the selection to scroll into view
     *                  (see selection region constants defined in
     *                   nsISelectionController).
     * @param aIsSynchronous - when true, scrolls the selection into view
     *                         before returning. If false, posts a request which
     *                         is processed at some point after the method returns.
     * @param aVertical - how to align the frame vertically and when.
     *                    See nsIPresShell.h:ScrollAxis for details.
     * @param aHorizontal - how to align the frame horizontally and when.
     *                    See nsIPresShell.h:ScrollAxis for details.
     */
    [noscript] void scrollIntoViewInternal(in short aRegion,
                                           in boolean aIsSynchronous,
                                           in ScrollAxis aVertical,
                                           in ScrollAxis aHorizontal);
};

