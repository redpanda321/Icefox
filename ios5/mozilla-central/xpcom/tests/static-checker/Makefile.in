# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

DEPTH = ../../..
topsrcdir = @top_srcdir@
srcdir = @srcdir@
VPATH = @srcdir@

# We will do compilations that create dependency files.
NEED_MDDEPDIR = 1

include $(DEPTH)/config/autoconf.mk

STACK_FAILURE_TESTCASES = \
  TestStack.cpp \
  TestStackTemplate.cpp \
  StackNoConstructor.cpp \
  StackVector.cpp \
  StackConditional.cpp \
  StackAggrInit.cpp \
  StackCondBad.cpp \
  StackFalsePositive.cpp \
  $(NULL)

STACK_PASS_TESTCASES = \
  StackPlacementNewOK.cpp \
  StackCond.cpp \
  $(NULL)

OUTPARAMS_WARNING_TESTCASES = \
  e1.cpp \
  e4.cpp \
  e6.cpp \
  e7.cpp \
  e8.cpp \
  e9.cpp \
  e10.cpp \
  e11.cpp \
  e12.cpp \
  e13.cpp \
  $(NULL)

OUTPARAMS_NS_FAILED_TESTCASES = \
  e2.cpp \
  e5.cpp \
  $(NULL)

OUTPARAMS_PASS_TESTCASES = \
  o1.cpp \
  o2.cpp \
  o3.cpp \
  o4.cpp \
  o5.cpp \
  o6.cpp \
  o7.cpp \
  o8.cpp \
  o9.cpp \
  o10.cpp \
  o11.cpp \
  o12.cpp \
  o13.cpp \
  o14.cpp \
  o15.cpp \
  o16.cpp \
  onull.cpp \
  onull2.cpp \
  opmember.cpp \
  $(NULL)

FLOW_PASS_TESTCASES = \
 flow_through_pass.cpp

FLOW_FAILURE_TESTCASES = \
 flow_through_fail.cpp

MUST_OVERRIDE_PASS_TESTCASES = \
  OverrideOK1.cpp \
  OverrideOK2.cpp \
  OverrideOK3-NamespaceTypedef.cpp \
  $(NULL)

MUST_OVERRIDE_FAILURE_TESTCASES = \
  OverrideFail1.cpp \
  OverrideFail2.cpp \
  OverrideFail3.cpp \
  OverrideFail4.cpp \
  $(NULL)

OVERRIDE_PASS_TESTCASES = \
  override-pass.cpp \
  override-namespace-typedef.cpp \
  $(NULL)

OVERRIDE_FAILURE_TESTCASES = \
  override-global.cpp \
  override-signature.cpp \
  override-static.cpp \
  override-virtual.cpp \
  $(NULL)

STATIC_INIT_PASS_TESTCASES = \
  TestStaticInitStructOK.cpp \
  $(NULL)

STATIC_INIT_WARNING_TESTCASES = \
  TestStaticInitAttr.cpp \
  TestStaticInitConstructor.cpp \
  TestStaticInitGlobal.cpp \
  TestStaticInitGlobalConst.cpp \
  $(NULL)

STATIC_FAILURE_TESTCASES = \
  $(FLOW_FAILURE_TESTCASES) \
  $(MUST_OVERRIDE_FAILURE_TESTCASES) \
  $(OVERRIDE_FAILURE_TESTCASES) \
  $(NULL)

STATIC_WARNING_TESTCASES = \
  $(OUTPARAMS_WARNING_TESTCASES) \
  $(STACK_FAILURE_TESTCASES) \
  $(STATIC_INIT_WARNING_TESTCASES) \
  $(NULL)

STATIC_PASS_TESTCASES = \
  $(OUTPARAMS_NS_FAILED_TESTCASES) \
  $(OUTPARAMS_PASS_TESTCASES) \
  $(STACK_PASS_TESTCASES) \
  $(FLOW_PASS_TESTCASES) \
  $(MUST_OVERRIDE_PASS_TESTCASES) \
  $(OVERRIDE_PASS_TESTCASES) \
  $(STATIC_INIT_PASS_TESTCASES) \
  $(NULL)


include $(topsrcdir)/config/rules.mk

# We want to compile each file and invert the result to ensure that
# compilation failed.
check:: \
  $(STATIC_FAILURE_TESTCASES:.cpp=.s-fail) \
  $(STATIC_WARNING_TESTCASES:.cpp=.s-warn) \
  $(STATIC_PASS_TESTCASES:.cpp=.s-pass)

%.s-fail: %.cpp $(GLOBAL_DEPS) $(DEHYDRA_SCRIPTS)
	@printf "Compiling $(<F) to check that the static-analysis script is checking properly..."
	@if $(CCC) $(OUTOPTION)/dev/null -S $(COMPILE_CXXFLAGS) $(_VPATH_SRCS) >$(*F).errlog 2>&1; then \
	  printf "fail:\nerror: compilation of $(<F) succeeded. It shouldn't have!\n"; \
	  exit 1; \
	else \
	  printf "ok.\n"; \
	fi

%.s-warn: %.cpp $(GLOBAL_DEPS) $(DEHYDRA_SCRIPTS)
	@printf "Compiling $(<F) to check that the static-analysis script is checking properly..."
	@if $(CCC) -Werror $(OUTOPTION)/dev/null -S $(COMPILE_CXXFLAGS) $(_VPATH_SRCS) >$(*F).errlog 2>&1; then \
	  printf "fail:\nerror: compilation of $(<F) succeeded with -Werror. It shouldn't have!\n"; \
	  exit 1; \
	fi
	@if $(CCC) $(OUTOPTION)/dev/null -S $(COMPILE_CXXFLAGS) $(_VPATH_SRCS) >$(*F).werrlog 2>&1; then \
	  printf "ok.\n"; \
	else \
	  printf "fail:\nerror: compilation of $(<F) without -Werror failed. A warning should have been issued.\n"; \
	  exit 1; \
	fi

%.s-pass: %.cpp $(GLOBAL_DEPS) $(DEHYDRA_SCRIPTS)
	@printf "Compiling $(<F) to check that the static-analysis script is checking properly..."
	@if $(CCC) -Werror $(OUTOPTION)/dev/null -S $(COMPILE_CXXFLAGS) $(_VPATH_SRCS) >$(*F).errlog 2>&1; then \
	  printf "ok.\n"; \
	else \
	  printf "fail:\nerror: compilation of $(<F) failed. It shouldn't have!\n"; \
	  exit 1; \
	fi
