webrtc_test.html is a simple functional test for a WebRTC enabled browser. It
has only been tested with Chrome, and is most likely only working with Chrome at
the moment. The following instructions are in part Chrome specific.

If you want a quick, automated test, have a look at the test/sanity_check script
which uses this page to quickly launch a call test on Linux.

Table of contents:
  * PREREQUISITES
  * SINGLE FAKE CLIENT IN LOOPBACK MODE
  * TWO CLIENTS CALLING EACH OTHER
  * TWO AUTOCALLING CLIENTS

* PREREQUISITES

The following is necessary to run the test:
- A WebRTC enabled Chrome binary. (Available in dev or canary channel, version
  18.0.1008 or newer.)
- A peerconnection_server binary. See peerconnection/README for more information
  on how to do this.

  Note: The web page must normally be on a web server to be able to access the
      camera for security reasons.

  See http://blog.chromium.org/2008/12/security-in-depth-local-web-pages.html
  for more details on this topic. This can be overridden with the flag
  --allow-file-access-from-files, in which case running it over the file://
  URI scheme works.

* SINGLE FAKE CLIENT IN LOOPBACK MODE

1. Start peerconnection_server.
2. Start the WebRTC Chrome build:
   $ <path_to_chrome_binary>/chrome --enable-media-stream
   The --enable-media-stream flag is required for the time being.
3. Open the server test page, ensure loopback is enabled, choose a name (for
   example "loopback") and connect to the server.
   For version 18.0.1008 to 18.0.1020, use:
     http://libjingle.googlecode.com/svn-history/r103/trunk/talk/examples/peerconnection/server/server_test.html
   For version 18.0.1021 and later, use:
     http://libjingle.googlecode.com/svn/trunk/talk/examples/peerconnection/server/server_test.html
4. Open the test page, connect to the server, select the loopback peer, click
   call.

* TWO CLIENTS CALLING EACH OTHER

1. Start peerconnection_server.
2. Start the WebRTC Chrome build, see scenario (1).
3. Open the test page, connect to the server.
4. Open a new new tab, open the test page, connect to the server.
     OR
   On another machine, repeat 2 and 3.
5. Select the other peer, click call.

* TWO AUTOCALLING CLIENTS

1. Run the procedure for "two clients calling each other", but give the pages
   the following parameters:
   webrtc_test.html?name=test1&autoconnect=yes&server=localhost:8888
   webrtc_test.html?name=test2&autocall=test1&server=localhost:8888
