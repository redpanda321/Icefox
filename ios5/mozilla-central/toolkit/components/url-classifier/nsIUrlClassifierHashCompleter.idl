/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"

/**
 * This interface is implemented by nsIUrlClassifierHashCompleter clients.
 */
[scriptable, uuid(bbd6c954-7cb4-4447-bc55-8cefd1ceed89)]
interface nsIUrlClassifierHashCompleterCallback : nsISupports
{
  /**
   * A complete hash has been found that matches the partial hash.
   * This method may be called 0-n times for a given
   * nsIUrlClassifierCompleter::complete() call.
   *
   * @param hash
   *        The 128-bit hash that was discovered.
   * @param table
   *        The name of the table that this hash belongs to.
   * @param chunkId
   *        The database chunk that this hash belongs to.
   * @param trusted
   *        The completion was verified with a MAC and can be cached.
   */
  void completion(in ACString hash,
                  in ACString table,
                  in PRUint32 chunkId,
                  in boolean trusted);

  /**
   * The completion is complete.  This method is called once per
   * nsIUrlClassifierCompleter::complete() call, after all completion()
   * calls are finished.
   *
   * @param status
   *        NS_OK if the request completed successfully, or an error code.
   */
  void completionFinished(in nsresult status);
};

/**
 * Clients updating the url-classifier database have the option of sending
 * partial (32-bit) hashes of URL fragments to be blacklisted.  If the
 * url-classifier encounters one of these truncated hashes, it will ask
 * an nsIUrlClassifierCompleter instance to asynchronously provide the
 * complete hash, along with some associated metadata.
 */
[scriptable, uuid(ade9b72b-3562-44f5-aba6-e63246be53ae)]
interface nsIUrlClassifierHashCompleter : nsISupports
{
  /**
   * Request a completed hash.
   *
   * @param partialHash
   *        The 32-bit hash encountered by the url-classifier.
   * @param callback
   *        An nsIUrlClassifierCompleterCallback instance.
   */
  void complete(in ACString partialHash,
                in nsIUrlClassifierHashCompleterCallback callback);

  /**
   * Set the client and wrapped key for verified updates.
   */
  void setKeys(in ACString clientKey, in ACString wrappedKey);

  /**
   * The URL for the gethash request
   */
  attribute ACString gethashUrl;
};
