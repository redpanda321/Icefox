#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

DEPTH		= ../..
topsrcdir	= @top_srcdir@
srcdir		= @srcdir@

include $(DEPTH)/config/autoconf.mk

DIRS = \
       $(NULL)

TEST_DIRS += tests

ifeq ($(MOZ_WIDGET_TOOLKIT),os2)
OSDIR		= os2
else
ifeq ($(MOZ_WIDGET_TOOLKIT),windows)
OSDIR		= win
else
ifeq ($(MOZ_WIDGET_TOOLKIT),cocoa)
OSDIR		= mac
else
ifeq ($(MOZ_WIDGET_TOOLKIT),android)
OSDIR		= android
else
ifeq ($(MOZ_WIDGET_TOOLKIT),gonk)
OSDIR		= gonk
else
ifeq ($(MOZ_WIDGET_TOOLKIT),uikit)
OSDIR		= uikit
else
OSDIR		= unix
endif
endif
endif
endif
endif
endif

VPATH		:= $(srcdir) $(srcdir)/$(OSDIR)

MODULE = exthandler
LIBRARY_NAME    = exthandler_s
LIBXUL_LIBRARY  = 1


ifeq ($(MOZ_WIDGET_TOOLKIT),cocoa)

CMMSRCS	= nsOSHelperAppService.mm \
			nsMIMEInfoMac.mm \
			nsLocalHandlerAppMac.mm \
			$(NULL)
else
ifeq ($(MOZ_WIDGET_TOOLKIT),uikit)
CMMSRCS	= \
  nsOSHelperAppService.mm \
  nsMIMEInfoUIKit.mm \
  nsLocalHandlerAppUIKit.mm \
  $(NULL)
else
OSHELPER	= nsOSHelperAppService.cpp
endif
endif

LOCAL_INCLUDES = -I$(srcdir)

LOCAL_INCLUDES += -I$(topsrcdir)/dom/base \
            -I$(topsrcdir)/dom/ipc \
            -I$(topsrcdir)/content/base/src \
            -I$(topsrcdir)/content/events/src \
            -I$(topsrcdir)/netwerk/base/src \
            -I$(topsrcdir)/netwerk/protocol/http

ifeq ($(MOZ_WIDGET_TOOLKIT),gtk2)
OSHELPER	+= nsGNOMERegistry.cpp
OSHELPER  += nsMIMEInfoUnix.cpp
endif

ifeq ($(MOZ_WIDGET_TOOLKIT),android)
OSHELPER += nsMIMEInfoAndroid.cpp
OSHELPER += nsAndroidHandlerApp.cpp
OSHELPER += nsExternalSharingAppService.cpp
EXPORTS += nsExternalSharingAppService.h
OSHELPER += nsExternalURLHandlerService.cpp
EXPORTS += nsExternalURLHandlerService.h
endif

ifeq ($(MOZ_WIDGET_TOOLKIT),qt)
OSHELPER += nsGNOMERegistry.cpp
OSHELPER += nsMIMEInfoUnix.cpp
endif

ifeq ($(MOZ_WIDGET_TOOLKIT),windows)
OSHELPER  += nsMIMEInfoWin.cpp
LOCAL_INCLUDES += -I$(srcdir)/win
endif

ifeq ($(MOZ_WIDGET_TOOLKIT),os2)
OSHELPER  += nsMIMEInfoOS2.cpp
endif

EXPORTS_NAMESPACES = mozilla/dom

EXPORTS_mozilla/dom = \
    ExternalHelperAppParent.h \
    ExternalHelperAppChild.h

EXPORTS += \
		$(OSDIR)/nsOSHelperAppService.h \
		nsExternalHelperAppService.h \
		$(NULL)

XPIDLSRCS = \
	nsCExternalHandlerService.idl	\
	nsIExternalProtocolService.idl \
	nsIExternalHelperAppService.idl	\
	nsIHelperAppLauncherDialog.idl \
	nsIContentDispatchChooser.idl \
	nsIHandlerService.idl	\
	nsIExternalSharingAppService.idl \
	nsIExternalURLHandlerService.idl \
	$(NULL)

CPPSRCS	= \
	nsExternalHelperAppService.cpp	\
	nsExternalProtocolHandler.cpp \
	nsMIMEInfoImpl.cpp \
	nsLocalHandlerApp.cpp \
	$(OSHELPER) \
	ExternalHelperAppChild.cpp \
	ExternalHelperAppParent.cpp \
	$(NULL)

ifdef MOZ_ENABLE_DBUS
CPPSRCS += nsDBusHandlerApp.cpp
LOCAL_INCLUDES   += $(TK_CFLAGS) $(MOZ_DBUS_CFLAGS)
endif

ifdef MOZ_ENABLE_MEEGOTOUCHSHARE
OSHELPER  += nsMeegoExternalSharingAppService.cpp
LOCAL_INCLUDES   += $(MOZ_PLATFORM_MAEMO_CFLAGS)
EXPORTS += nsExternalSharingAppService.h
endif

ifeq ($(MOZ_PLATFORM_MAEMO),5)
ifdef MOZ_ENABLE_GNOMEVFS
LOCAL_INCLUDES   += $(MOZ_GNOMEVFS_CFLAGS)
endif
ifdef MOZ_ENABLE_GIO
LOCAL_INCLUDES   += $(MOZ_GIO_CFLAGS)
endif
endif

ifdef MOZ_ENABLE_CONTENTACTION
CPPSRCS += nsContentHandlerApp.cpp
endif

EXTRA_COMPONENTS = \
  nsHandlerService.js \
  nsHandlerService.manifest \
  nsWebHandlerApp.js \
  nsWebHandlerApp.manifest \
  $(NULL)

# we don't want the shared lib, but we want to force the creation of a static lib.
FORCE_STATIC_LIB = 1
SRCS_IN_OBJDIR	= 1
include $(topsrcdir)/config/config.mk
include $(topsrcdir)/ipc/chromium/chromium-config.mk
include $(topsrcdir)/config/rules.mk

ifneq (,$(filter qt gtk2, $(MOZ_WIDGET_TOOLKIT)))
CXXFLAGS += $(TK_CFLAGS) $(MOZ_DBUS_GLIB_CFLAGS)
endif
