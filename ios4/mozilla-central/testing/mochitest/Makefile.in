#
# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is mozilla.org code.
#
# The Initial Developer of the Original Code is
# Netscape Communications Corporation.
# Portions created by the Initial Developer are Copyright (C) 1998
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#
# Alternatively, the contents of this file may be used under the terms of
# either the GNU General Public License Version 2 or later (the "GPL"), or
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****

DEPTH		= ../..
topsrcdir	= @top_srcdir@
srcdir		= @srcdir@
VPATH		= @srcdir@
relativesrcdir  = testing/mochitest

include $(DEPTH)/config/autoconf.mk

DIRS =	MochiKit \
	static \
	dynamic \
	tests \
	chrome \
	ssltunnel \
	$(NULL)

include $(topsrcdir)/config/rules.mk
# We're installing to _tests/testing/mochitest, so this is the depth
# necessary for relative objdir paths.
TARGET_DEPTH = ../../..
include $(topsrcdir)/build/automation-build.mk

# files that get copied into $objdir/_tests/
_SERV_FILES = 	\
		runtests.py \
		automation.py \
		runtestsremote.py \
		runtestsvmware.py \
		$(topsrcdir)/build/mobile/devicemanager.py \
		$(topsrcdir)/build/automationutils.py \
		$(topsrcdir)/build/poster.zip \
		$(topsrcdir)/build/mobile/remoteautomation.py \
		gen_template.pl \
		server.js \
		harness-a11y.xul \
		harness-overlay.xul \
		harness.xul \
		browser-test-overlay.xul \
		browser-test.js \
		chrome-harness.js \
		ipc-overlay.xul \
		ipc.js \
		browser-harness.xul \
		redirect-a11y.html \
		redirect.html \
		redirect.js \
		$(topsrcdir)/build/pgo/server-locations.txt \
		$(topsrcdir)/netwerk/test/httpserver/httpd.js \
		mozprefs.js \
		$(NULL)	

_PYWEBSOCKET_FILES = \
		pywebsocket/standalone.py \
		$(NULL)

_MOD_PYWEBSOCKET_FILES = \
		pywebsocket/mod_pywebsocket/__init__.py \
		pywebsocket/mod_pywebsocket/dispatch.py \
		pywebsocket/mod_pywebsocket/util.py \
		pywebsocket/mod_pywebsocket/msgutil.py \
		pywebsocket/mod_pywebsocket/memorizingfile.py \
		pywebsocket/mod_pywebsocket/headerparserhandler.py \
		$(NULL)

_HANDSHAKE_FILES = \
		pywebsocket/mod_pywebsocket/handshake/__init__.py \
		pywebsocket/mod_pywebsocket/handshake/_base.py \
		pywebsocket/mod_pywebsocket/handshake/draft75.py \
		pywebsocket/mod_pywebsocket/handshake/handshake.py \
		$(NULL)

_DEST_DIR = $(DEPTH)/_tests/$(relativesrcdir)

libs:: $(_PYWEBSOCKET_FILES)
	$(INSTALL) $(foreach f,$^,"$f") $(_DEST_DIR)/pywebsocket

libs:: $(_MOD_PYWEBSOCKET_FILES)
	$(INSTALL) $(foreach f,$^,"$f") $(_DEST_DIR)/pywebsocket/mod_pywebsocket

libs:: $(_HANDSHAKE_FILES)
	$(INSTALL) $(foreach f,$^,"$f") $(_DEST_DIR)/pywebsocket/mod_pywebsocket/handshake

runtests.py: runtests.py.in
	$(PYTHON) $(topsrcdir)/config/Preprocessor.py \
	$(DEFINES) $(ACDEFINES) $^ > $@

GARBAGE += runtests.py

libs:: $(_SERV_FILES)
	$(INSTALL) $^ $(_DEST_DIR)

# Binaries and scripts that don't get packaged with the build,
# but that we need for the test harness
TEST_HARNESS_BINS := \
  xpcshell$(BIN_SUFFIX) \
  ssltunnel$(BIN_SUFFIX) \
  certutil$(BIN_SUFFIX) \
  pk12util$(BIN_SUFFIX) \
  fix_stack_using_bpsyms.py \
  $(NULL)

ifeq ($(OS_ARCH),WINNT)
TEST_HARNESS_BINS += \
  crashinject$(BIN_SUFFIX) \
  crashinjectdll$(DLL_SUFFIX) \
  vmwarerecordinghelper$(DLL_SUFFIX) \
  $(NULL)
endif

ifeq ($(OS_ARCH),Darwin)
TEST_HARNESS_BINS += fix_macosx_stack.py
endif

ifeq ($(OS_ARCH),Linux)
TEST_HARNESS_BINS += fix-linux-stack.pl
endif

ifeq (gtk2_1,$(MOZ_WIDGET_TOOLKIT)_$(MOZ_X11))
TEST_HARNESS_BINS += screentopng
endif

# Components / typelibs that don't get packaged with
# the build, but that we need for the test harness.
TEST_HARNESS_COMPONENTS := \
  test_necko.xpt \
  $(NULL)

# We need the test plugin as some tests rely on it
ifeq (Darwin,$(OS_TARGET))
TEST_HARNESS_PLUGINS := \
  Test.plugin/
else
TEST_HARNESS_PLUGINS := \
  $(DLL_PREFIX)nptest$(DLL_SUFFIX)
endif

# Rules for staging the necessary harness bits for a test package
PKG_STAGE = $(DIST)/test-package-stage
DIST_BIN = $(DIST)/bin

stage-package:
	$(NSINSTALL) -D $(PKG_STAGE)/mochitest && $(NSINSTALL) -D $(PKG_STAGE)/bin/plugins
	@(cd $(DEPTH)/_tests/testing/mochitest/ && tar $(TAR_CREATE_FLAGS) - *) | (cd $(PKG_STAGE)/mochitest && tar -xf -)
	@(cd $(DIST_BIN) && tar $(TAR_CREATE_FLAGS) - $(TEST_HARNESS_BINS)) | (cd $(PKG_STAGE)/bin && tar -xf -)
	@(cd $(DIST_BIN)/components && tar $(TAR_CREATE_FLAGS) - $(TEST_HARNESS_COMPONENTS)) | (cd $(PKG_STAGE)/bin/components && tar -xf -)
	@(cd $(topsrcdir)/build/pgo/certs && tar $(TAR_CREATE_FLAGS) - *) | (cd $(PKG_STAGE)/certs && tar -xf -)
ifdef MOZ_PLUGINS
	@(cd $(DIST_BIN)/plugins && tar $(TAR_CREATE_FLAGS) - $(TEST_HARNESS_PLUGINS)) | (cd $(PKG_STAGE)/bin/plugins && tar -xf -)
endif
