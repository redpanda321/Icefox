/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Java XPCOM Bindings.
 *
 * The Initial Developer of the Original Code is IBM Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2007
 * IBM Corporation. All Rights Reserved.
 *
 * Contributor(s):
 *   Javier Pedemonte (jhpedemonte@gmail.com)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

[scriptable, uuid(fb520bac-92cf-4a6b-a2f3-eb63313d7d84)]
interface nsIJXTestArrayParams : nsISupports
{
	void multiplyEachItemInIntegerArray2(
                          in PRInt32 val, 
                          [array, size_is(count)] inout PRInt32 valueArray,
                          in PRUint32 count);
  
  void copyIntArray([array, size_is(count)] in PRInt32 srcArray,
          in PRUint32 count, [array, size_is(count)] out PRInt32 dstArray);

  void returnIntArray([array, size_is(count)] in PRInt32 srcArray,
          in PRUint32 count,
          [retval, array, size_is(count)] out PRInt32 dstArray);
  
  void copyByteArray([array, size_is(count)] in octet srcArray,
          in PRUint32 count, [array, size_is(count)] out octet dstArray);

  void returnByteArray([array, size_is(count)] in octet srcArray,
          in PRUint32 count,
          [retval, array, size_is(count)] out octet dstArray);

  void copySizedString([size_is(count)] in string srcString,
          in PRUint32 count, [size_is(count)] out string dstString);

  void returnSizedString([size_is(count)] in string srcString,
          in PRUint32 count, [retval, size_is(count)] out string dstString);
  
  void copySizedWString([size_is(count)] in wstring srcString,
          in PRUint32 count, [size_is(count)] out wstring dstString);

  void returnSizedWString([size_is(count)] in wstring srcString,
          in PRUint32 count, [retval, size_is(count)] out wstring dstString);
};