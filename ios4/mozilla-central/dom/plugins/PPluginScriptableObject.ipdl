/* -*- Mode: C++; c-basic-offset: 2; indent-tabs-mode: nil; tab-width: 8 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Plugins.
 *
 * The Initial Developer of the Original Code is
 *   Chris Jones <jones.chris.g@gmail.com>.
 * Portions created by the Initial Developer are Copyright (C) 2009
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Benjamin Smedberg <benjamin@smedbergs.us>
 *   Ben Turner <bent.mozilla@gmail.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

include protocol PPluginInstance;
include protocol PPluginIdentifier;

include "npapi.h";
include "npruntime.h";
include "mozilla/plugins/PluginMessageUtils.h";

using mozilla::void_t;
using mozilla::null_t;

namespace mozilla {
namespace plugins {

union Variant {
  void_t;
  null_t;
  bool;
  int;
  double;
  nsCString;
  nullable PPluginScriptableObject;
};

rpc protocol PPluginScriptableObject
{
  manager PPluginInstance;

both:
  async __delete__();

parent:
  rpc NPN_Evaluate(nsCString aScript)
    returns (Variant aResult,
             bool aSuccess);

child:
  rpc Invalidate();

both:
  // NPClass methods
  rpc HasMethod(PPluginIdentifier aId)
    returns (bool aHasMethod);

  rpc Invoke(PPluginIdentifier aId,
             Variant[] aArgs)
    returns (Variant aResult,
             bool aSuccess);

  rpc InvokeDefault(Variant[] aArgs)
    returns (Variant aResult,
             bool aSuccess);

  rpc HasProperty(PPluginIdentifier aId)
    returns (bool aHasProperty);

  rpc SetProperty(PPluginIdentifier aId,
                  Variant aValue)
    returns (bool aSuccess);

  rpc RemoveProperty(PPluginIdentifier aId)
    returns (bool aSuccess);

  rpc Enumerate()
    returns (PPluginIdentifier[] aProperties,
             bool aSuccess);

  rpc Construct(Variant[] aArgs)
    returns (Variant aResult,
             bool aSuccess);

  // Objects are initially unprotected, and the Protect and Unprotect functions
  // only affect protocol objects that represent NPObjects created in the same
  // process (rather than protocol objects that are a proxy for an NPObject
  // created in another process). Protocol objects representing local NPObjects
  // are protected after an NPObject has been associated with the protocol
  // object. Sending the protocol object as an argument to the other process
  // temporarily protects the protocol object again for the duration of the call.
  async Protect();
  async Unprotect();

  /**
   * GetProperty is slightly wonky due to the way we support NPObjects that have
   * methods and properties with the same name. When child calls parent we
   * simply return a property. When parent calls child, however, we need to do
   * several checks at once and return all the results simultaneously.
   */
parent:
  rpc GetParentProperty(PPluginIdentifier aId)
    returns (Variant aResult,
             bool aSuccess);

child:
  rpc GetChildProperty(PPluginIdentifier aId)
    returns (bool aHasProperty,
             bool aHasMethod,
             Variant aResult,
             bool aSuccess);
};

} // namespace plugins
} // namespace mozilla
