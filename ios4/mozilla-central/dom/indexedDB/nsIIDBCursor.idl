/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set ts=2 et sw=2 tw=80: */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Indexed Database.
 *
 * The Initial Developer of the Original Code is
 * The Mozilla Foundation.
 * Portions created by the Initial Developer are Copyright (C) 2010
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Ben Turner <bent.mozilla@gmail.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIIDBRequest;
interface nsIVariant;

%{C++
#include "jsapi.h"
%}

/**
 * IDBCursor interface.  See
 * http://dev.w3.org/2006/webapi/WebSimpleDB/#idl-def-IDBCursor for more
 * information.
 */
[scriptable, uuid(f0954b7d-b639-49ac-ad4b-b5e072fd0cc5)]
interface nsIIDBCursor : nsISupports
{
  const unsigned short NEXT = 0;
  const unsigned short NEXT_NO_DUPLICATE = 1;
  const unsigned short PREV = 2;
  const unsigned short PREV_NO_DUPLICATE = 3;
  readonly attribute unsigned short direction;

  readonly attribute nsIVariant key;

  [implicit_jscontext]
  readonly attribute jsval value;

  // Returns true always for non-preloaded cursors. Calling continue means that
  // the same onsuccess function will be called again with the new key/value
  // (or null if no more matches).
  //
  // For preloaded cursors returns true if key/value have been set to new
  // values. If false then no more matches are available and getting the key,
  // value property will throw, as will calling update() and remove().
  [implicit_jscontext, optional_argc]
  boolean continue([optional /* undefined */] in jsval key);

  // Success fires IDBTransactionEvent, result == key
  [implicit_jscontext]
  nsIIDBRequest update(in jsval value);

  // Success fires IDBTransactionEvent, result == null
  nsIIDBRequest remove();
};
