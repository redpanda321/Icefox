<?xml version="1.0"?>

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is the Places test code.
   -
   - The Initial Developer of the Original Code is Mozilla Corp.
   - Portions created by the Initial Developer are Copyright (C) 2009
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -   Marco Bonardo <mak77@bonardo.net> (Original Author)
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the GPL or the LGPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<?xml-stylesheet href="chrome://global/skin" type="text/css"?>
<?xml-stylesheet href="chrome://mochikit/content/tests/SimpleTest/test.css"
                 type="text/css"?>

<?xml-stylesheet href="chrome://browser/skin/places/editBookmarkOverlay.css"?>
<?xml-stylesheet href="chrome://browser/content/places/places.css"?>
<?xml-stylesheet href="chrome://browser/skin/places/places.css"?>

<?xul-overlay href="chrome://browser/content/places/placesOverlay.xul"?>
<?xul-overlay href="chrome://browser/content/places/editBookmarkOverlay.xul"?>

<!DOCTYPE window [
  <!ENTITY % editBookmarkOverlayDTD SYSTEM "chrome://browser/locale/places/editBookmarkOverlay.dtd">
  %editBookmarkOverlayDTD;
]>

<window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
        title="Bug 427633 - Disable creating a New Folder in the bookmarks dialogs if insertionPoint is invalid"
        onload="runTest();">

  <script type="application/javascript"
          src="chrome://mochikit/content/MochiKit/packed.js" />
  <script type="application/javascript"
          src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js" />
  <script type="application/javascript"
          src="chrome://browser/content/places/editBookmarkOverlay.js"/>

  <body xmlns="http://www.w3.org/1999/xhtml" />

  <vbox id="editBookmarkPanelContent"/>

  <script type="application/javascript">
  <![CDATA[

     /**
      * Bug 427633 - Disable creating a New Folder in the bookmarks dialogs if
      * insertionPoint is invalid.
      */

    function runTest() {
      const Cc = Components.classes;
      const Ci = Components.interfaces;

      var bs = Cc["@mozilla.org/browser/nav-bookmarks-service;1"].
               getService(Ci.nsINavBookmarksService);
      var ios = Cc["@mozilla.org/network/io-service;1"].
                getService(Ci.nsIIOService);
      function uri(spec) {
        return ios.newURI(spec, null, null);
      }

      // Add a bookmark.
      var itemId = bs.insertBookmark(bs.toolbarFolder,
                                     uri("http://www.mozilla.org/"),
                                     bs.DEFAULT_INDEX,
                                     "mozilla");

      // Init panel.
      ok(gEditItemOverlay, "gEditItemOverlay is in context");
      gEditItemOverlay.initPanel(itemId);
      ok(gEditItemOverlay._initialized, "gEditItemOverlay is initialized");
      // We must be sure tree is initialized, so we wait for place to be set.
      SimpleTest.waitForExplicitFinish();
      var tree = gEditItemOverlay._element("folderTree");
      tree.addEventListener("DOMAttrModified", function(event) {
          if (event.attrName != "place")
            return;
          tree.removeEventListener("DOMAttrModified", arguments.callee, false);
          SimpleTest.executeSoon(function() {
            tree.view.selection.clearSelection();
            ok(document.getElementById("editBMPanel_newFolderButton").disabled,
               "New folder button is disabled if there's no selection");

            // Cleanup.
            bs.removeItem(itemId);
            SimpleTest.finish();
            });
        }, false);
      // Open the folder tree.
      document.getElementById("editBMPanel_foldersExpander").doCommand();
    }
  ]]>
  </script>

</window>
