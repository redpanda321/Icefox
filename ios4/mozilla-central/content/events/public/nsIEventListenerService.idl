/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Mozilla Foundation.
 * Portions created by the Initial Developer are Copyright (C) 2009
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Olli Pettay <Olli.Pettay@helsinki.fi> (Original Author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsIDOMEventListener.idl"

interface nsIDOMEventTarget;

/**
 * An instance of this interface describes how an event listener
 * was added to an event target.
 */
[scriptable, uuid(cbc2ea6e-4043-4435-ba8f-64cbf6638622)]
interface nsIEventListenerInfo : nsISupports
{
  /**
   * The type of the event for which the listener was added.
   */
  readonly attribute AString type;
  readonly attribute boolean capturing;
  readonly attribute boolean allowsUntrusted;
  readonly attribute boolean inSystemEventGroup;
  /**
   * Tries to serialize event listener to a string.
   * Returns null if serialization isn't possible
   * (for example with C++ listeners).
   */
  AString toSource();

  /**
   * If jsdIDebuggerService is active and the listener is implemented in JS,
   * this returns the listener as a jsdIValue. Otherwise null.
   */
  nsISupports getDebugObject();
};

[scriptable, uuid(7be78bb6-33f7-4f31-b3f3-97eefaff2762)]
interface nsIEventListenerService : nsISupports
{
  /**
   * Returns an array of nsIEventListenerInfo objects.
   * If aEventTarget doesn't have any listeners, this returns null.
   */
  void getListenerInfoFor(in nsIDOMEventTarget aEventTarget,
                          [optional] out unsigned long aCount,
                          [retval, array, size_is(aCount)] out
                            nsIEventListenerInfo aOutArray);

  /**
   * Returns an array of event targets.
   * aEventTarget will be at index 0.
   * The objects are the ones that would be used as DOMEvent.currentTarget while
   * dispatching an event to aEventTarget
   * @note Some events, especially 'load', may actually have a shorter
   *       event target chain than what this methods returns.
  */
  void getEventTargetChainFor(in nsIDOMEventTarget aEventTarget,
                              [optional] out unsigned long aCount,
                              [retval, array, size_is(aCount)] out
                                nsIDOMEventTarget aOutArray);

  /**
   * Returns system event group.
   */
  readonly attribute nsIDOMEventGroup systemEventGroup;
};

