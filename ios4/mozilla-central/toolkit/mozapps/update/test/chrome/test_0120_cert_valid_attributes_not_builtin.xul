<?xml version="1.0"?>
<!--
/* Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/publicdomain/zero/1.0/
 */
-->

<?xml-stylesheet href="chrome://global/skin" type="text/css"?>
<?xml-stylesheet href="chrome://mochikit/content/tests/SimpleTest/test.css" type="text/css"?>

<window title="Test update checking wizard with valid certificate attribute names and values and cert not built-in"
        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
        onload="runTestDefault();">
<script type="application/javascript" 
        src="chrome://mochikit/content/MochiKit/packed.js"/>
<script type="application/javascript"
        src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"/>
<script type="application/javascript"
        src="chrome://mochikit/content/chrome/toolkit/mozapps/update/test/chrome/utils.js"/>

<script type="application/javascript">
<![CDATA[

const TESTS = [ {
  pageid: PAGEID_CHECKING
}, {
  pageid: PAGEID_ERRORS,
  buttonClick: "finish"
} ];

Components.utils.import("resource://gre/modules/CertUtils.jsm");

const CERT_ATTRS = ["nickname", "emailAddress", "subjectName", "commonName",
                    "organization", "organizationalUnit", "sha1Fingerprint",
                    "md5Fingerprint", "tokenName", "issuerName", "serialNumber",
                    "issuerCommonName", "issuerOrganization",
                    "issuerOrganizationUnit", "dbKey", "windowTitle"];
var gDefaultAppUpdateURL;

function runTest() {
  debugDump("Entering runTest");

  var request = AUS_Cc["@mozilla.org/xmlextras/xmlhttprequest;1"].
                createInstance(AUS_Ci.nsIXMLHttpRequest);
  request.open("GET", "https://example.com/", true);
  request.channel.notificationCallbacks = new BadCertHandler(true);
  request.onload = function(event) { testXHRLoad(event); };
  request.onerror = function(event) { testXHRError(event); };
  request.send(null);
}

function testXHRError(aEvent) {
  debugDump("Entering testXHRError");

  ok(true, "Entering testXHRError - something went wrong");

  var request = aEvent.target;
  var status = 0;
  try {
    status = request.status;
  }
  catch (e) {
  }

  if (status == 0)
    status = request.channel.QueryInterface(AUS_Ci.nsIRequest).status;

  ok(false, "XHR onerror called: " + status);

  finishTestDefault();
}

function testXHRLoad(aEvent) {
  debugDump("Entering testXHRLoad");

  var channel = aEvent.target.channel;
  var cert = channel.securityInfo.QueryInterface(AUS_Ci.nsISSLStatusProvider).
             SSLStatus.QueryInterface(AUS_Ci.nsISSLStatus).serverCert;
  CERT_ATTRS.forEach(function(aCertAttrName) {
    Services.prefs.setCharPref(PREF_APP_UPDATE_CERTS_BRANCH + "1." +
                               aCertAttrName, cert[aCertAttrName]);
  });

  var queryString = "?showDetails=1" + getVersionParams();
  var url = "https://example.com/" + URL_PATH + "/update.sjs?showDetails=1" +
            getVersionParams();
  gDefaultAppUpdateURL = gDefaultPrefBranch.getCharPref(PREF_APP_UPDATE_URL);
  gDefaultPrefBranch.setCharPref(PREF_APP_UPDATE_URL, url);
  debugDump("Default Update URL: " + url);

  gUP.checkForUpdates();
}

function finishTest() {
  debugDump("Entering finishTest");

  CERT_ATTRS.forEach(function(aCertAttrName) {
    Services.prefs.clearUserPref(PREF_APP_UPDATE_CERTS_BRANCH + "1." +
                                 aCertAttrName);
  });
  gDefaultPrefBranch.setCharPref(PREF_APP_UPDATE_URL, gDefaultAppUpdateURL);
  finishTestDefault();
}

]]>
</script>

<body xmlns="http://www.w3.org/1999/xhtml">
  <p id="display"></p>
  <div id="content" style="display: none"></div>
  <pre id="test"></pre>
</body>
</window>
