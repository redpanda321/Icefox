/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Extension Manager.
 *
 * The Initial Developer of the Original Code is
 * the Mozilla Foundation.
 * Portions created by the Initial Developer are Copyright (C) 2009
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *  Dave Townsend <dtownsend@oxymoronical.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIDOMWindowInternal;
interface nsIVariant;
interface amIInstallCallback;
interface nsIURI;

/**
 * This interface is used to allow webpages to start installing add-ons.
 */
[scriptable, uuid(4fdf4f84-73dc-4857-9bbe-84895e8afd5d)]
interface amIWebInstaller : nsISupports
{
  /**
   * Checks if installation is enabled for a webpage.
   *
   * @param  aMimetype
   *         The mimetype for the add-on to be installed
   * @param  referer
   *         The URL of the webpage trying to install an add-on
   * @return true if installation is enabled
   */
  boolean isInstallEnabled(in AString aMimetype, in nsIURI aReferer);

  /**
   * Installs an array of add-ons at the request of a webpage
   *
   * @param  aMimetype
   *         The mimetype for the add-ons
   * @param  aWindow
   *         The window installing the add-ons
   * @param  aReferer
   *         The URI for the webpage installing the add-ons
   * @param  aUris
   *         The URIs of add-ons to be installed
   * @param  aHashes
   *         The hashes for the add-ons to be installed
   * @param  aNames
   *         The names for the add-ons to be installed
   * @param  aIcons
   *         The icons for the add-ons to be installed
   * @param  aCallback
   *         An optional callback to notify about installation success and
   *         failure
   * @param  aInstallCount
   *         An optional argument including the number of add-ons to install
   * @return true if the installation was successfully started
   */
  boolean installAddonsFromWebpage(in AString aMimetype,
                                   in nsIDOMWindowInternal aWindow,
                                   in nsIURI aReferer,
                                   [array, size_is(aInstallCount)] in wstring aUris,
                                   [array, size_is(aInstallCount)] in wstring aHashes,
                                   [array, size_is(aInstallCount)] in wstring aNames,
                                   [array, size_is(aInstallCount)] in wstring aIcons,
                                   [optional] in amIInstallCallback aCallback,
                                   [optional] in PRUint32 aInstallCount);
};
