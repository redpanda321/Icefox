<?xml version="1.0"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Mozilla Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2008
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Shawn Wilsher <me@shawnwilsher.com> (Original Author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/**
 * This test ensures that the delete key removes a download.  This was added by
 * bug 411172.
 */
-->

<window title="Download Manager Test"
        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
        onload="test();">

  <script type="application/javascript"
          src="chrome://mochikit/content/MochiKit/packed.js"/>
  <script type="application/javascript"
          src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"/>
  <script type="application/javascript"
          src="chrome://mochikit/content/tests/SimpleTest/EventUtils.js"/>
  <script type="application/javascript"
          src="utils.js"/>

  <script type="application/javascript">
  <![CDATA[

var ios = Cc["@mozilla.org/network/io-service;1"].getService(Ci.nsIIOService);
var dmFile = Cc["@mozilla.org/file/directory_service;1"].
             getService(Ci.nsIProperties).get("TmpD", Ci.nsIFile);
dmFile.append("dm-ui-test.file");
dmFile.createUnique(Ci.nsIFile.NORMAL_FILE_TYPE, 0666);
var gTestPath = ios.newFileURI(dmFile).spec;

// Downloads are sorted by endTime, so make sure the end times are distinct
const DownloadData = [
  { name: "381603.patch",
    source: "https://bugzilla.mozilla.org/attachment.cgi?id=266520",
    target: gTestPath,
    startTime: 1180493839859230,
    endTime: 1180493839859239,
    state: Ci.nsIDownloadManager.DOWNLOAD_FINISHED,
    currBytes: 0, maxBytes: -1, preferredAction: 0, autoResume: 0 },
  { name: "381603.patch",
    source: "https://bugzilla.mozilla.org/attachment.cgi?id=266520",
    target: gTestPath,
    startTime: 1180493839859230,
    endTime: 1180493839859236,
    state: Ci.nsIDownloadManager.DOWNLOAD_FAILED,
    currBytes: 0, maxBytes: -1, preferredAction: 0, autoResume: 0 },
  { name: "381603.patch",
    source: "https://bugzilla.mozilla.org/attachment.cgi?id=266520",
    target: gTestPath,
    startTime: 1180493839859230,
    endTime: 1180493839859234,
    state: Ci.nsIDownloadManager.DOWNLOAD_CANCELED,
    currBytes: 0, maxBytes: -1, preferredAction: 0, autoResume: 0 },
  { name: "381603.patch",
    source: "https://bugzilla.mozilla.org/attachment.cgi?id=266520",
    target: gTestPath,
    startTime: 1180493839859230,
    endTime: 1180493839859232,
    state: Ci.nsIDownloadManager.DOWNLOAD_BLOCKED_PARENTAL,
    currBytes: 0, maxBytes: -1, preferredAction: 0, autoResume: 0 },
  { name: "381603.patch",
    source: "https://bugzilla.mozilla.org/attachment.cgi?id=266520",
    target: gTestPath,
    startTime: 1180493839859230,
    endTime: 1180493839859230,
    state: Ci.nsIDownloadManager.DOWNLOAD_DIRTY,
    currBytes: 0, maxBytes: -1, preferredAction: 0, autoResume: 0 },
  { name: "381603.patch",
    source: "https://bugzilla.mozilla.org/attachment.cgi?id=266520",
    target: gTestPath,
    startTime: 1180493839859229,
    endTime: 1180493839859229,
    state: Ci.nsIDownloadManager.DOWNLOAD_BLOCKED_POLICY,
    currBytes: 0, maxBytes: -1, preferredAction: 0, autoResume: 0 }
];


function test()
{
  var dmui = getDMUI();
  if (!dmui) {
    todo(false, "skip test for toolkit download manager UI");
    return;
  }

  var dm = Cc["@mozilla.org/download-manager;1"].
           getService(Ci.nsIDownloadManager);
  var db = dm.DBConnection;

  // First, we populate the database with some fake data
  db.executeSimpleSQL("DELETE FROM moz_downloads");
  var stmt = db.createStatement(
    "INSERT INTO moz_downloads (name, source, target, startTime, endTime, " +
      "state, currBytes, maxBytes, preferredAction, autoResume) " +
    "VALUES (:name, :source, :target, :startTime, :endTime, :state, " +
      ":currBytes, :maxBytes, :preferredAction, :autoResume)");
  for each (var dl in DownloadData) {
    for (var prop in dl)
      stmt.params[prop] = dl[prop];

    stmt.execute();
  }
  stmt.finalize();

  // See if the DM is already open, and if it is, close it!
  var wm = Cc["@mozilla.org/appshell/window-mediator;1"].
           getService(Ci.nsIWindowMediator);
  var win = wm.getMostRecentWindow("Download:Manager");
  if (win)
    win.close();

  let os = Cc["@mozilla.org/observer-service;1"].
           getService(Ci.nsIObserverService);
  const DLMGR_UI_DONE = "download-manager-ui-done";

  let testObs = {
    observe: function(aSubject, aTopic, aData)
    {
      if (aTopic != DLMGR_UI_DONE)
        return;

      SimpleTest.waitForFocus(function () { deleteDownload(aSubject) }, aSubject);
    }
  };

  function deleteDownload(win) {
    let doc = win.document;

    let stmt = db.createStatement("SELECT COUNT(*) FROM moz_downloads");
    try {
      stmt.executeStep();
      let richlistbox = doc.getElementById("downloadView");
      is(stmt.getInt32(0), richlistbox.children.length,
         "The database and the number of downloads display matches");
      stmt.reset();

      let len = DownloadData.length;
      for (let i = 0; i < len; i++) {
        synthesizeKey("VK_BACK_SPACE", {}, win);

        stmt.executeStep();
        is(stmt.getInt32(0), len - (i + 1),
           "The download was properly removed");
        stmt.reset();
      }
    }
    finally {
      stmt.reset();
      stmt.finalize();
    }

    win.close();
    dmFile.remove(false);
    os.removeObserver(testObs, DLMGR_UI_DONE);
    SimpleTest.finish();
  }

  // Register with the observer service
  os.addObserver(testObs, DLMGR_UI_DONE, false);

  // Show the Download Manager UI
  dmui.show();

  SimpleTest.waitForExplicitFinish();
}

  ]]>
  </script>

  <body xmlns="http://www.w3.org/1999/xhtml">
    <p id="display"></p>
    <div id="content" style="display:none;"></div>
    <pre id="test"></pre>
  </body>
</window>
