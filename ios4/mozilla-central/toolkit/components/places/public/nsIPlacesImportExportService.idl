/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Places.
 *
 * The Initial Developer of the Original Code is
 * Mozilla Corp.
 * Portions created by the Initial Developer are Copyright (C) 2007
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Dietrich Ayala <dietrich@mozilla.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsILocalFile;
interface nsIURI;

/**
 * The PlacesImportExport interface provides methods for importing
 * and exporting Places data.
 */

[scriptable, uuid(47a4a09e-c708-4e68-b2f2-664d982ce026)]
interface nsIPlacesImportExportService: nsISupports
{
  /**
   * Loads the given bookmarks.html file and replaces it with the current
   * bookmarks hierarchy (if aIsInitialImport is true) or appends it
   * (if aIsInitialImport is false).
   *
   * Three nsIObserverService notifications are fired as a result of the
   * import.  "bookmarks-restore-begin" is fired just before the import is
   * started.  "bookmarks-restore-success" is fired right after the
   * bookmarks are successfully imported.  "bookmarks-restore-failed" is
   * fired right after a failure occurs when importing the bookmarks.
   * Observers will be passed through their data parameters either "html"
   * if aIsInitialImport is false or "html-initial" if aIsInitialImport is
   * true.  The observer subject will be null.
   */
  void importHTMLFromFile(in nsILocalFile aFile, in boolean aIsInitialImport);

  /**
   * Same thing as importHTMLFromFile, but takes a URI instead
   */
  void importHTMLFromURI(in nsIURI aURI, in boolean aIsInitialImport);

  /**
   * Loads the given bookmarks.html file and puts it in the given folder
   *
   * Three nsIObserverService notifications are fired as a result of the
   * import.  "bookmarks-restore-begin" is fired just before the import is
   * started.  "bookmarks-restore-success" is fired right after the
   * bookmarks are successfully imported.  "bookmarks-restore-failed" is
   * fired right after a failure occurs when importing the bookmarks.
   * Observers will be passed through their data parameters either "html"
   * if aIsInitialImport is false or "html-initial" if aIsInitialImport is
   * true.  The observer subject will be an nsISupportsPRInt64 whose value
   * is aFolder.
   */
  void importHTMLFromFileToFolder(in nsILocalFile aFile, in PRInt64 aFolder, in boolean aIsInitialImport);

  /**
   * Saves the current bookmarks hierarchy to a bookmarks.html file.
   */
  void exportHTMLToFile(in nsILocalFile aFile);

  /**
   * Backup the bookmarks.html file.
   */
  void backupBookmarksFile();
};
