/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "nspluginroot.idl"
#include "nsIPlugin.idl"
#include "nsIInputStream.idl"

interface nsIPluginInstance;
interface nsIDocument;

%{C++
#include "npapi.h"
class nsPluginEvent;
%}

[ref] native nsIPluginInstanceRef(nsIPluginInstance*);

[uuid(B48DC23E-C20B-4292-974E-E8FF97B9F1CC)]
interface nsIPluginInstanceOwner : nsISupports
{
  /**
   * Let the owner know what its instance is
   */
  void setInstance(in nsIPluginInstance aInstance);

  /**
   * Get the instance associated with this owner.
   */
  void getInstance(in nsIPluginInstanceRef aInstance);

%{C++
  // make getter_AddRefs work
  inline nsresult GetInstance(nsIPluginInstance** aInstance) {
    return GetInstance(*aInstance);
  }
%}

  /**
   * Get a handle to the window structure of the owner.
   * This pointer cannot be made persistent by the caller.
   */
  void getWindow(in NPWindowStarRef aWindow);

  /**
   * Get the display mode for the plugin instance.
   */
  readonly attribute PRInt32 mode;

  /**
   * Create a place for the plugin to live in the owner's
   * environment. this may or may not create a window
   * depending on the windowless state of the plugin instance.
   */
  void createWidget();

%{C++
  /**
   * Called when there is a valid target so that the proper
   * frame can be updated with new content. will not be called
   * with nsnull aTarget.
   */
  NS_IMETHOD
  GetURL(const char *aURL, const char *aTarget, 
         nsIInputStream *aPostStream,
         void *aHeadersData, PRUint32 aHeadersDataLen) = 0;
%}

  /**
   * Show a status message in the host environment.
   */
  void showStatus(in string aStatusMsg);

%{C++
  NS_IMETHOD ShowStatus(const PRUnichar *aStatusMsg) = 0;
%}

  /**
   * Get the associated document.
   */
  readonly attribute nsIDocument document;

  /**
   * Invalidate the rectangle
   */
  void invalidateRect(in NPRectPtr aRect);

  /**
   * Invalidate the region
   */
  void invalidateRegion(in NPRegion aRegion);

  /**
   * Force a redraw
   */
  void forceRedraw();

  /**
   * Get NetscapeWindow, corresponds to NPNVnetscapeWindow
   */
  void getNetscapeWindow(in voidPtr aValue);

  /**
   * Show native context menu
   */
%{C++
  virtual NPError ShowNativeContextMenu(NPMenu* menu, void* event) = 0;
  virtual NPBool  ConvertPoint(double sourceX, double sourceY, NPCoordinateSpace sourceSpace,
                               double *destX, double *destY, NPCoordinateSpace destSpace) = 0;
%}

  void setEventModel(in PRInt32 eventModel);

%{C++
  virtual void SendIdleEvent() = 0;
%}
};
