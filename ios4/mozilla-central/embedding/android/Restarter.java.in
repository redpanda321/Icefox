/* -*- Mode: Java; tab-width: 20; indent-tabs-mode: nil; -*-
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Android code.
 *
 * The Initial Developer of the Original Code is Mozilla Foundation.
 * Portions created by the Initial Developer are Copyright (C) 2010
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Brad Lassey <blassey@mozilla.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#filter substitution
package org.mozilla.@MOZ_APP_NAME@;

import android.content.*;
import android.util.Log;
import java.io.*;

public class Restarter extends BroadcastReceiver {
    @Override 
    public void onReceive(Context context, Intent intent) {
        Log.i("Restarter", "trying to restart @MOZ_APP_NAME@");
        try { 
            boolean stillRunning;
            do {
                stillRunning = false;
                Process p = Runtime.getRuntime().exec("/system/bin/ps");
                BufferedReader psOut = new BufferedReader(new InputStreamReader(p.getInputStream()));
                String line;
                Log.i("Restarter", "pid: " + new Integer(android.os.Process.myPid()).toString());
                while((line = psOut.readLine()) != null) {
                    Log.i("Restarter", "ps: " + line);
                    if (line.contains("org.mozilla.@MOZ_APP_NAME@.App")){
                        if (!line.contains(new Integer(android.os.Process.myPid()).toString())){
                            Log.i("Restarter", "app still running, wait a bit");
                            stillRunning = true;
                            Thread.sleep(500);
                            break; // don't need to look at the rest
                        } else {
                            Log.i("Restarter", "found ourselves");
                        }
                    }
                }
            } while(stillRunning);
        } catch (Exception e) {
                Log.i("Restarter", e.toString());
        }
        try {
            String action = "android.intent.action.MAIN";
            String env;
            StringBuffer envstr = new StringBuffer();
            for (int c = 0; (env = intent.getStringExtra("env" + c)) != null; c++) {
                envstr.append(" --es env" + c + " " + env);
            }
            String amCmd = "/system/bin/am start -a " + action + envstr.toString() + 
                " -n org.mozilla.@MOZ_APP_NAME@/org.mozilla.@MOZ_APP_NAME@.App";
            Log.i("Restarter", amCmd);

            Runtime.getRuntime().exec(amCmd);
        } catch (Exception e) {
            Log.i("Restarter", e.toString());
        }
        System.exit(0);    
    }
};
