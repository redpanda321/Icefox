#
# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is mozilla.org code.
#
# The Initial Developer of the Original Code is
# Netscape Communications Corporation.
# Portions created by the Initial Developer are Copyright (C) 1998
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#   Robert Ginda <rginda@netscape.com>
#   John Taylor <jtaylor@netscape.com>
#
# Alternatively, the contents of this file may be used under the terms of
# either of the GNU General Public License Version 2 or later (the "GPL"),
# or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****

DEPTH		= ..
topsrcdir	= @top_srcdir@
srcdir		= @srcdir@
VPATH		= @srcdir@

include $(DEPTH)/config/autoconf.mk

# For sanity's sake, we compile nsinstall without the wrapped system
# headers, so that we can use it to set up the wrapped system headers.
VISIBILITY_FLAGS =

HOST_PROGRAM	= nsinstall$(HOST_BIN_SUFFIX)

ifeq (WINNT,$(HOST_OS_ARCH))
HOST_CSRCS	= nsinstall_win.c
else
HOST_CSRCS	= nsinstall.c pathsub.c
endif

PLSRCS		= nfspwd.pl

TARGETS		= $(HOST_PROGRAM) $(PLSRCS:.pl=) $(SIMPLE_PROGRAMS)

ifndef CROSS_COMPILE
ifdef USE_ELF_DYNSTR_GC
TARGETS		+= elf-dynstr-gc
# Compiling the above will create dependency files.
NEED_MDDEPDIR	= 1
endif
endif

# IMPORTANT: Disable NSBUILDROOT for this directory only, otherwise we have
# a recursive rule for finding nsinstall and the Perl scripts.
ifdef NSBUILDROOT
override NSBUILDROOT :=
endif

ifdef GNU_CC
MODULE_OPTIMIZE_FLAGS = -O3
endif

ifndef COMPILER_DEPEND
ifndef MOZ_NATIVE_MAKEDEPEND
DIRS		+= mkdepend
endif
endif

include $(topsrcdir)/config/config.mk

# Do not install util programs
NO_INSTALL=1

include $(topsrcdir)/config/rules.mk

HOST_CFLAGS += -DUNICODE -D_UNICODE

ifeq ($(OS_CONFIG),SunOS4.1)
NSPR_CFLAGS	+= -I$(srcdir)/../nsprpub/pr/include/md
endif

HEADERS = \
	$(DEPTH)/mozilla-config.h \
	$(srcdir)/nsStaticComponents.h \
	$(NULL)

export:: $(TARGETS) $(HEADERS)
	$(INSTALL) $(IFLAGS1) $(HEADERS) $(DIST)/include
	-rm -f $(FINAL_LINK_COMPS) $(FINAL_LINK_LIBS) $(FINAL_LINK_COMP_NAMES)
	-rm -f $(DIST)/bin/chrome/chromelist.txt
ifdef HOST_PROGRAM
	$(INSTALL) $(HOST_PROGRAM) $(DIST)/bin
endif

# Generate a new buildid every time we "export" in config... that's only
# supposed to be once per-build!
export::
ifdef MOZ_BUILD_DATE
	printf "%s" $(MOZ_BUILD_DATE) > buildid
else
	$(PYTHON) $(topsrcdir)/toolkit/xre/make-platformini.py --print-buildid > buildid
endif

ifdef WRAP_SYSTEM_INCLUDES
export::
	if test ! -d system_wrappers; then mkdir system_wrappers; fi
	$(PERL) $(topsrcdir)/config/preprocessor.pl $(DEFINES) $(ACDEFINES) \
		-DBUILD_STATIC_LIBS=$(BUILD_STATIC_LIBS) \
		-DMOZ_TREE_CAIRO=$(MOZ_TREE_CAIRO) \
		-DMOZ_ENABLE_LIBXUL=$(MOZ_ENABLE_LIBXUL) \
		-DMOZ_NATIVE_HUNSPELL=$(MOZ_NATIVE_HUNSPELL) \
		-DMOZ_NATIVE_BZ2=$(MOZ_NATIVE_BZ2) \
		-DMOZ_NATIVE_ZLIB=$(MOZ_NATIVE_ZLIB) \
		-DMOZ_NATIVE_PNG=$(MOZ_NATIVE_PNG) \
		-DMOZ_NATIVE_JPEG=$(MOZ_NATIVE_JPEG) \
		-DMOZ_NATIVE_LIBEVENT=$(MOZ_NATIVE_LIBEVENT) \
		$(srcdir)/system-headers | $(PERL) $(topsrcdir)/nsprpub/config/make-system-wrappers.pl system_wrappers
	$(INSTALL) system_wrappers $(DIST)

GARBAGE_DIRS += system_wrappers
endif

ifdef WRAP_STL_INCLUDES
ifdef GNU_CXX
stl_compiler = gcc
else
ifdef _MSC_VER
stl_compiler = msvc
endif
endif
endif

ifdef stl_compiler
STL_WRAPPERS_SENTINEL = $(DIST)/stl_wrappers/sentinel

$(STL_WRAPPERS_SENTINEL): $(srcdir)/make-stl-wrappers.py $(srcdir)/$(stl_compiler)-stl-wrapper.template.h $(srcdir)/stl-headers $(GLOBAL_DEPS)
	$(PYTHON) $(srcdir)/make-stl-wrappers.py stl_wrappers $(stl_compiler) $(srcdir)/$(stl_compiler)-stl-wrapper.template.h $(srcdir)/stl-headers
	$(PYTHON) $(srcdir)/nsinstall.py stl_wrappers $(DIST)
	touch $(STL_WRAPPERS_SENTINEL)

export:: $(STL_WRAPPERS_SENTINEL)

GARBAGE += $(STL_WRAPPERS_SENTINEL)
GARBAGE_DIRS += stl_wrappers
endif

install::
	$(SYSINSTALL) $(IFLAGS1) $(DEPTH)/mozilla-config.h $(DESTDIR)$(includedir)

GARBAGE += \
	$(FINAL_LINK_COMPS) $(FINAL_LINK_LIBS) $(FINAL_LINK_COMP_NAMES) buildid $(srcdir)/*.pyc

ifndef CROSS_COMPILE
ifdef USE_ELF_DYNSTR_GC
elf-dynstr-gc: elf-dynstr-gc.c $(GLOBAL_DEPS)
	$(CC) $(COMPILE_CFLAGS) $(GLIB_CFLAGS) -o $@ $< $(LDFLAGS) $(GLIB_LIBS) 
endif
endif

FORCE:

ifdef MKDEPEND_DIR
clean clobber realclean clobber_all::
	cd $(MKDEPEND_DIR); $(MAKE) $@
endif

PYUNITS := \
  unit-Expression.py \
  unit-Preprocessor.py \
  unit-nsinstall.py \
  unit-printprereleasesuffix.py \
  unit-JarMaker.py \
  unit-buildlist.py \
  $(NULL)

check:: check-python-modules check-jar-mn

check-python-modules::
	@$(EXIT_ON_ERROR) \
	for test in $(PYUNITS); do \
	  $(PYTHON) $(srcdir)/tests/$$test ; \
	done

check-jar-mn::
	$(MAKE) -C tests/src-simple check-jar
	$(MAKE) -C tests/src-simple check-flat
	$(MAKE) -C tests/src-simple check-flat USE_EXTENSION_MANIFEST=1
ifneq (,$(filter-out WINNT OS2,$(OS_ARCH)))
	$(MAKE) -C tests/src-simple check-symlink
endif
