/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla.
 *
 * The Initial Developer of the Original Code is
 * Jan Wrobel <wrobel@blues.ath.cx>
 * Portions created by the Initial Developer are Copyright (C) 2008
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Jan Odvarko <odvarko@gmail.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIStreamListener;

/**
 * A channel implementing this interface allows one to intercept its data by
 * inserting intermediate stream listeners.
 */
[scriptable, uuid(68167b0b-ef34-4d79-a09a-8045f7c5140e)]
interface nsITraceableChannel : nsISupports
{
    /*
     * Replace the channel's listener with a new one, and return the listener 
     * the channel used to have. The new listener intercepts OnStartRequest, 
     * OnDataAvailable and OnStopRequest calls and must pass them to 
     * the original listener after examination. If multiple callers replace 
     * the channel's listener, a chain of listeners is created.
     * The caller of setNewListener has no way to control at which place 
     * in the chain its listener is placed.
     *
     * Note: The caller of setNewListener must not delay passing 
     * OnStartRequest to the original listener.
     *
     * Note2: A channel may restrict when the listener can be replaced.
     * It is not recommended to allow listener replacement after OnStartRequest
     * has been called.
     */
    nsIStreamListener setNewListener(in nsIStreamListener aListener);
};
