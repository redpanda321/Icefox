/* -*- Mode: IDL; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is nsIApplicationCache.idl.
 *
 * The Initial Developer of the Original Code is
 * Mozilla Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2008
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Dave Camp <dcamp@mozilla.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIApplicationCache;

/**
 * The application cache service manages the set of application cache
 * groups.
 */
[scriptable, uuid(611161c8-37d0-450f-a4fe-457c47bbaf64)]
interface nsIApplicationCacheService : nsISupports
{
    /**
     * Create a new, empty application cache for the given cache
     * group.
     */
    nsIApplicationCache createApplicationCache(in ACString group);

    /**
     * Get an application cache object for the given client ID.
     */
    nsIApplicationCache getApplicationCache(in ACString clientID);

    /**
     * Get the currently active cache object for a cache group.
     */
    nsIApplicationCache getActiveCache(in ACString group);

    /**
     * Deactivate the currently-active cache object for a cache group.
     */
    void deactivateGroup(in ACString group);

    /**
     * Try to find the best application cache to serve a resource.
     */
    nsIApplicationCache chooseApplicationCache(in ACString key);

    /**
     * Flags the key as being opportunistically cached.
     *
     * This method should also propagate the entry to other
     * application caches with the same opportunistic namespace, but
     * this is not currently implemented.
     *
     * @param cache
     *        The cache in which the entry is cached now.
     * @param key
     *        The cache entry key.
     */
    void cacheOpportunistically(in nsIApplicationCache cache, in ACString key);

    /**
     * Get the list of application cache groups.
     */
    void getGroups([optional] out unsigned long count,
                   [array, size_is(count), retval] out string groupIDs);
};
