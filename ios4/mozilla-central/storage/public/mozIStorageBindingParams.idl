/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: sw=2 ts=2 sts=2 et
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Mozilla Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2009
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Shawn Wilsher <me@shawnwilsher.com> (Original Author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIVariant;

[scriptable, uuid(a8d4827c-641c-45e3-a9ea-493570b4106b)]
interface mozIStorageBindingParams : nsISupports {
  /**
   * Binds aValue to the parameter with the name aName.
   *
   * @param aName
   *        The name of the parameter to bind aValue to.
   * @param aValue
   *        The value to bind.
   */
   void bindByName(in AUTF8String aName,
                   in nsIVariant aValue);
   [noscript] void bindUTF8StringByName(in AUTF8String aName,
                                        in AUTF8String aValue);
   [noscript] void bindStringByName(in AUTF8String aName,
                                    in AString aValue);
   [noscript] void bindDoubleByName(in AUTF8String aName,
                                    in double aValue);
   [noscript] void bindInt32ByName(in AUTF8String aName,
                                   in long aValue);
   [noscript] void bindInt64ByName(in AUTF8String aName,
                                   in long long aValue);
   [noscript] void bindNullByName(in AUTF8String aName);
   void bindBlobByName(in AUTF8String aName,
                       [array, const, size_is(aValueSize)] in octet aValue,
                       in unsigned long aValueSize);

   /**
    * Binds aValue to the parameter with the index aIndex.
    *
    * @param aIndex
    *        The zero-based index of the parameter to bind aValue to.
    * @param aValue
    *        The value to bind.
    */
   void bindByIndex(in unsigned long aIndex,
                    in nsIVariant aValue);
   [noscript] void bindUTF8StringByIndex(in unsigned long aIndex,
                                         in AUTF8String aValue);
   [noscript] void bindStringByIndex(in unsigned long aIndex,
                                     in AString aValue);
   [noscript] void bindDoubleByIndex(in unsigned long aIndex,
                                     in double aValue);
   [noscript] void bindInt32ByIndex(in unsigned long aIndex,
                                    in long aValue);
   [noscript] void bindInt64ByIndex(in unsigned long aIndex,
                                    in long long aValue);
   [noscript] void bindNullByIndex(in unsigned long aIndex);
   void bindBlobByIndex(in unsigned long aIndex,
                        [array, const, size_is(aValueSize)] in octet aValue,
                        in unsigned long aValueSize);
};
