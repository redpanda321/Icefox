/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"

%{C++
/**
 * Calling QueryInterface with this special IID will return a null-terminated
 * table of QITableEntry's. Not all objects support this.
 * Note that this breaks XPCOM rules a bit (the table doesn't derive from
 * nsISupports).
 */
#define NS_THISPTROFFSETS_SID \
    { 0x23e017cc, 0x5d6f, 0x430c, \
      { 0xb3, 0xe6, 0x9d, 0x32, 0x65, 0x70, 0xd6, 0xb8 } }
%}

/**
 * Provides information about a specific implementation class.  If you want
 * your class to implement nsIClassInfo, see nsIClassInfo.h for instructions --
 * you most likely do not want to inherit from nsIClassInfo.
 */

[scriptable, uuid(986c11d0-f340-11d4-9075-0010a4e73d9a)]
interface nsIClassInfo : nsISupports
{
    /**
     * Get an ordered list of the interface ids that instances of the class 
     * promise to implement. Note that nsISupports is an implicit member 
     * of any such list and need not be included. 
     *
     * Should set *count = 0 and *array = null and return NS_OK if getting the 
     * list is not supported.
     */
    void getInterfaces(out uint32_t count, 
                       [array, size_is(count), retval] out nsIIDPtr array);

    /**
     * Get a language mapping specific helper object that may assist in using
     * objects of this class in a specific lanaguage. For instance, if asked
     * for the helper for nsIProgrammingLanguage::JAVASCRIPT this might return 
     * an object that can be QI'd into the nsIXPCScriptable interface to assist 
     * XPConnect in supplying JavaScript specific behavior to callers of the 
     * instance object.
     *
     * see: nsIProgrammingLanguage.idl
     *
     * Should return null if no helper available for given language.
     */
    nsISupports getHelperForLanguage(in uint32_t language);

    /**
     * A contract ID through which an instance of this class can be created
     * (or accessed as a service, if |flags & SINGLETON|), or null.
     */
    readonly attribute string   contractID;

    /**
     * A human readable string naming the class, or null.
     */
    readonly attribute string   classDescription;

    /**
     * A class ID through which an instance of this class can be created
     * (or accessed as a service, if |flags & SINGLETON|), or null.
     */
    readonly attribute nsCIDPtr classID;

    /**
     * Return language type from list in nsIProgrammingLanguage
     */

    readonly attribute uint32_t implementationLanguage;

    /**
     * Bitflags for 'flags' attribute.
     */
    const uint32_t SINGLETON            = 1 << 0;
    const uint32_t THREADSAFE           = 1 << 1;
    const uint32_t MAIN_THREAD_ONLY     = 1 << 2;
    const uint32_t DOM_OBJECT           = 1 << 3;
    const uint32_t PLUGIN_OBJECT        = 1 << 4;
    const uint32_t SINGLETON_CLASSINFO  = 1 << 5;

    /**
     * 'flags' attribute bitflag: whether objects of this type implement
     * nsIContent.
     */
    const uint32_t CONTENT_NODE         = 1 << 6;
    
    // The high order bit is RESERVED for consumers of these flags. 
    // No implementor of this interface should ever return flags 
    // with this bit set.
    const uint32_t RESERVED             = 1 << 31;


    readonly attribute uint32_t flags;

    /**
     * Also a class ID through which an instance of this class can be created
     * (or accessed as a service, if |flags & SINGLETON|).  If the class does
     * not have a CID, it should return NS_ERROR_NOT_AVAILABLE.  This attribute
     * exists so C++ callers can avoid allocating and freeing a CID, as would
     * happen if they used classID.
     */
    [noscript] readonly attribute nsCID classIDNoAlloc;

};
