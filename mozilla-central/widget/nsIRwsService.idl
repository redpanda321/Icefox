/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"

[scriptable, uuid(74a1105c-7e5a-418e-9a57-a0fc8cc992fc)]
interface nsIRwsService : nsISupports
{
  /**
   * Retrieves the icon given to files with the specified extension
   *
   * @param aExt        The extension without the leading dot;
   *                    if the dot is present, it will be ignored.
   * @param aNeedMini   Retrieve a mini icon if true; a standard icon if false.
   * @return            An HPOINTER representing the icon.
   */
  unsigned long iconFromExtension(in string aExt, in boolean aNeedMini);

  /**
   * Retrieves the icon for a specific file or abstract object.
   *
   * @param aPath       The fully-qualified name of the file or object.
   * @param aAbstract   False for filesystem objects, true for abstract objects.
   * @param aNeedMini   Retrieve a mini icon if true; a standard icon if false.
   * @return            An HPOINTER representing the icon.
   */
  unsigned long iconFromPath(in string aPath, in boolean aAbstract,
                             in boolean aNeedMini);

  /**
   * Retrieves a file or abstract object's icon using its WPS object handle.
   *
   * @param aHandle     The file or object's WPS object handle.
   * @param aNeedMini   Retrieve a mini icon if true; a standard icon if false.
   * @return            An HPOINTER representing the icon.
   */
  unsigned long iconFromHandle(in unsigned long aHandle, in boolean aNeedMini);

  /**
   * Returns the name of the default handler for files with the
   * specified extension.  If the handler is a program, it also
   * retrieves the handler's WPS object handle;  if the default
   * handler is provided by a WPS class, aHandle will be zero.
   *
   * @param aExt        The extension without the leading dot;
   *                    if the dot is present, it will be ignored.
   * @param aHandle     Returns a WPS object handle for programs or
   *                    zero for class-based handlers.
   * @return            Either the unqualified title of a program or
   *                    the name of the WPS class' default viewer/player.
   */
  AString handlerFromExtension(in string aExt, out unsigned long aHandle);

  /**
   * Returns the name of the default handler for a specific file.
   * If the handler is a program, it also retrieves the handler's
   * WPS object handle;  if the default handler is provided by a
   * WPS class, aHandle will be zero.
   *
   * @param aPath       The fully-qualified name of a file.
   * @param aHandle     Returns a WPS object handle for programs or
   *                    zero for class-based handlers.
   * @return            Either the unqualified title of a program or
   *                    the name of the WPS class' default viewer/player.
   */
  AString handlerFromPath(in string aPath, out unsigned long aHandle);

  /**
   * Returns the unqualified title of the specified object.
   *
   * @param aHandle     A WPS object handle.
   * @return            The title of this object.
   */
  AString titleFromHandle(in unsigned long aHandle);

  /**
   * Displays the WPS object menu for the specified file or abstract object.
   *
   * @param aPath       The fully-qualified name of the file or object.
   * @param aAbstract   False for filesystem objects, true for abstract objects.
   */
  void menuFromPath(in string aPath, in boolean aAbstract);

  /**
   * Opens a file using the specified program file.  The effect
   * is identical to dropping the file on the program's icon.
   *
   * @param aFilePath   The fully-qualified name of a file.
   * @param aAppPath    The fully-qualified name of a program file.
   */
  void openWithAppPath(in string aFilePath, in string aAppPath);

  /**
   * Opens a file using the specified WPS object handle.  The effect
   * is identical to dropping the file on the object's icon.
   *
   * @param aFilePath   The fully-qualified name of a file.
   * @param aAppHandle  A WPS object handle.
   */
  void openWithAppHandle(in string aFilePath, in unsigned long aAppHandle);
};

